-- @path PN=./PetriNetsTrafos/metamodels/PetriNet.ecore
-- @path MTX=./PetriNetsTrafos/metamodels/AlgebraicMatrix.ecore

module pn2mat;
create OUT : MTX from IN : PN;

rule Net2Matrix {
	from
		n : PN!PetriNet
	to 
		s : MTX!Matrix (			
			horzLength <- n.places->size(),
			vertLength <- n.transitions->size(),
			rows <- n.transitions
		)
}

rule Transition2Row {
	from t: PN!Transition
	to   r: MTX!Row (
		cells <- PN!Place.allInstances()->collect ( p | thisModule.PlaceValue(p, t))
	)		
}

lazy rule PlaceValue {
	 from p : PN!Place, 
	 	  tt : PN!Transition 
	 to c : MTX!Cell (
	 	value <- thisModule.inPlaceVal(p, tt) - thisModule.outPlaceVal(p, tt)
	 )
}

helper def: inPlaceVal( p : PN!Place, t : PN!Transition ) : Integer =
	--let inPlaces : Set(PN!Place) = PN!TransToPlaceArc.allInstances()->select( arc | arc.source = t and arc.target = p ) in
	let inPlaces : Sequence(PN!TransToPlaceArc) = PN!TransToPlaceArc.allInstances()->select( arc | arc.source = t and arc.target = p ) in
	if (inPlaces->size()>0) then inPlaces->collect ( a | a.weight )->sum()
	else 0
	endif;
	
helper def: outPlaceVal(p : PN!Place, t : PN!Transition) : Integer =
	--let outPlaces : Set(PN!Place) = PN!PlaceToTransArc.allInstances()->select( arc | arc.source = p and arc.target = t  ) in
	let outPlaces : Sequence(PN!PlaceToTransArc) = PN!PlaceToTransArc.allInstances()->select( arc | arc.source = p and arc.target = t  ) in
	if (outPlaces->size()>0) then outPlaces->collect ( a | a.weight )->sum()
	else 0
	endif;