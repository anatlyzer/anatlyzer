model metamodel_2


enum BreakStates {off, on, under_repair, broken}

abstract class Machine < BaseObject_
attributes
  serialno : String
operations
  refImmediateComposite() : OclAny = Factory.allInstances()->select(o|o.machines->includes(self))->any(true)

end

class ThisModule < BaseObject_
operations
  refImmediateComposite() : OclAny = oclUndefined(OclVoid)

end

class Operator < Breakable
attributes
  name : String
operations
  refImmediateComposite() : OclAny = Factory.allInstances()->select(o|o.operators->includes(self))->any(true)

end

class Assembler < Processor
attributes
  priority : Boolean
  rate : String
operations
  refImmediateComposite() : OclAny = oclUndefined(OclVoid)

end

class Factory < BaseObject_
attributes
  name : String
operations
  refImmediateComposite() : OclAny = oclUndefined(OclVoid)

end

abstract class Breakable < BaseObject_
attributes
  state : BreakStates
operations
  refImmediateComposite() : OclAny = oclUndefined(OclVoid)

end

abstract class Processor < Machine, Breakable
operations
  refImmediateComposite() : OclAny = oclUndefined(OclVoid)

end

abstract class BaseObject_
operations
  refImmediateComposite() : OclAny = oclUndefined(OclVoid)

end

class AuxiliaryClass4USE
end

association xxx1_machines between
  Factory[0..1] role xxx1
  Machine[1..*] role machines
end

association xxx2_operators between
  Factory[0..1] role xxx2
  Operator[*] role operators
end

constraints
context AuxiliaryClass4USE inv graph1:
ThisModule.allInstances()->exists(thisModule|Factory.allInstances()->exists(f|f.machines->select(a|if not (a.oclIsKindOf(Assembler))
	then true
	else not (a.oclAsType(Assembler).priority)
	endif)->asSet()->union(f.operators->select(o|(o.state) <> (#off)))->asSet()->union(f.machines->select(a|if not (a.oclIsKindOf(Assembler))
	then false
	else a.oclAsType(Assembler).priority
	endif)->collect(a|thisModule.resolveTemp(a,'string1')))->flatten()->exists(_problem_|((not (if Operator.allInstances()->includes(_problem_)
	then let o1 = _problem_.oclAsType(Operator) in
	(o1.state) <> (#off)
	else false
	endif)) and (not (if Machine.allInstances()->includes(_problem_)
	then let a2 = _problem_.oclAsType(Machine) in
	if not (a2.oclIsKindOf(Assembler))
	then true
	else not (a2.oclAsType(Assembler).priority)
	endif
	else false
	endif))) and (not (if Assembler.allInstances()->includes(_problem_)
	then let a3 = _problem_.oclAsType(Assembler) in
	a3.priority
	else false
	endif)))))

