context AuxiliaryClass4USE inv graph1:
ThisModule.allInstances()->exists(thisModule|Factory.allInstances()->exists(f|f.machines->select(a|if not (a.oclIsKindOf(Assembler))
	then true
	else not (a.oclAsType(Assembler).priority)
	endif)->asSet()->union(f.operators->select(o|(o.state) <> (#off)))->asSet()->union(f.machines->select(a|if not (a.oclIsKindOf(Assembler))
	then false
	else a.oclAsType(Assembler).priority
	endif)->collect(a|thisModule.resolveTemp(a,'string1')))->flatten()->exists(_problem_|((not (if Operator.allInstances()->includes(_problem_)
	then let o1 = _problem_.oclAsType(Operator) in
	(o1.state) <> (#off)
	else false
	endif)) and (not (if Machine.allInstances()->includes(_problem_)
	then let a2 = _problem_.oclAsType(Machine) in
	if not (a2.oclIsKindOf(Assembler))
	then true
	else not (a2.oclAsType(Assembler).priority)
	endif
	else false
	endif))) and (not (if Assembler.allInstances()->includes(_problem_)
	then let a3 = _problem_.oclAsType(Assembler) in
	a3.priority
	else false
	endif)))))

