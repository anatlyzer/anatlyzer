-- @path PNML=./anatlyzer.example.models2015/metamodels/PNML_simplified.ecore
-- @path PetriNet=/anatlyzer.example.models2015/metamodels/PetriNet.ecore

-- @manual ThisModule.allInstances()->exists(thisModule|
--	 not (Arc.allInstances()->exists(a | 
--	    (a.source.oclIsKindOf(Place) and a.target.oclIsKindOf(Place)) or
--	    (a.source.oclIsKindOf(Transition) and a.target.oclIsKindOf(Transition)))))
--
-- @manual ThisModule.allInstances()->exists(thisModule|
--     not NetElement.allInstances()->exists(n|let arcsSet1 = n.contents->select(e|e.oclIsKindOf(Arc)) in
--	 (arcsSet1->exists(a | 
--	    (a.oclAsType(Arc).source.oclIsKindOf(Place) and a.oclAsType(Arc).target.oclIsKindOf(Place)) or
--	    (a.oclAsType(Arc).source.oclIsKindOf(Transition) and a.oclAsType(Arc).target.oclIsKindOf(Transition))))))

-- @pre ThisModule.allInstances()->exists(thisModule|(NetElement.allInstances()->isEmpty()) or (not (NetElement.allInstances()->exists(n|let arcsSet1 = n.contents->select(e|e.oclIsKindOf(Arc)) in
-- 	arcsSet1->exists(_problem_|(not (if Arc.allInstances()->includes(_problem_)
-- 	then let n2 = _problem_.oclAsType(Arc) in
-- 	(n2.source.oclIsKindOf(Place)) and (n2.target.oclIsKindOf(Transition))
-- 	else false
-- 	endif)) or (not (if Arc.allInstances()->includes(_problem_)
-- 	then let n3 = _problem_.oclAsType(Arc) in
-- 	(n3.source.oclIsKindOf(Transition)) and (n3.target.oclIsKindOf(Place))
-- 	else false
-- 	endif)))))))
-- @pre ThisModule.allInstances()->exists(thisModule|(NetElement.allInstances()->isEmpty()) or (not (NetElement.allInstances()->exists(n|let arcsSet1 = n.contents->select(e|e.oclIsKindOf(Arc)) in
-- 	arcsSet1->exists(_problem_|(not (if Arc.allInstances()->includes(_problem_)
-- 	then let n2 = _problem_.oclAsType(Arc) in
-- 	(n2.source.oclIsKindOf(Place)) and (n2.target.oclIsKindOf(Transition))
-- 	else false
-- 	endif)) or (not (if Arc.allInstances()->includes(_problem_)
-- 	then let n3 = _problem_.oclAsType(Arc) in
-- 	n3.target.oclIsKindOf(Place)
-- 	else false
-- 	endif)))))))
module PNML2PetriNet;
create OUT : PetriNet from IN : PNML;

rule PetriNet {
	from n : PNML!NetElement
	using {
		arcsSet : Set(PNML!Arc) = n.contents->select(e | e.oclIsKindOf(PNML!Arc));
	}
	to p : PetriNet!PetriNet (
		-- location <- n.location,
		name <- n.contents.size().toString(), -- 'mynet', -- n.nets.first().name.labels.first().text,
		elements <- n.contents, --->select(e | e.oclIsKindOf(PNML!NetContentElement)),
		arcs <- arcsSet
	)
}

helper def : selectLabel(labels : Sequence(PNML!Label)) : String = 
	if labels->isEmpty() then 'no-name' 
	else labels->first().text endif;


rule Place {
	from n : PNML!Place
	to   p : PetriNet!Place (
		location <- n.location,
		name <- thisModule.selectLabel(n.name.labels)
		-- ,
		-- net <- n.net.document
	)
}

rule Transition {
	from n : PNML!Transition
	to 	p : PetriNet!Transition (
		location <- n.location,
		name <-thisModule.selectLabel(n.name.labels)
		-- ,
		-- net <- n.net.document
	)
}

rule PlaceToTransition {
	from n : PNML!Arc (	-- arc source must be a place and arc target a transition
		n.source.oclIsKindOf(PNML!Place) and n.target.oclIsKindOf(PNML!Transition)
	) 
	to p : PetriNet!PlaceToTransition	(
		location <- n.location,
		name <- thisModule.selectLabel(n.name.labels), -- n.name.labels.first().text,
--		net <- n.net.document,
		"from" <- n.source,
		"to" <- n.target 
	)
}

rule TransitionToPlace {
	from n : PNML!Arc  (	
		-- arc source must be a transition and arc target a place
		-- n.source.oclIsKindOf(PNML!Transition) and n.target.oclIsKindOf(PNML!Place)
		-- The developer forgets to add n.source.oclIsKindOf(PNML!Transition)
		n.target.oclIsKindOf(PNML!Place)
	) 
	to p : PetriNet!TransitionToPlace (
		location <- n.location,
		name <- thisModule.selectLabel(n.name.labels), --n.name.labels.first().text,
		-- net <- n.net.document,
		"from" <- n.source, -- Problem here, because n.source could be a Place
		"to" <- n.target
	)
}