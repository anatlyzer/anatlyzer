@namespace(uri="http://anatlyzer/atl/errors", prefix="atl_errors")
package errors;

import "platform:/resource/anatlyzer.atl.typing/model/types.ecore";

class AnalysisResult {
   val Problem[*] problems;
   val BatchAnalysis[*] batchAnalysis;    
}

abstract class AnalysisInfo {
   
}

abstract class Problem extends AnalysisInfo {
	val Problem[*] dependents;   

	attr String[1] description;
	attr SeverityKind[1] severity;
	attr boolean needsCSP = false;
	
	attr ProblemStatus[1] status;

	attr Boolean[1] ignoredByUser = false;

	transient val StringToObjectMap[*] data;	
 } 
  
class StringToObjectMap : java.util.Map$Entry {
 	attr String[1] key;
 	attr Object[1] value;  	
}


abstract class BatchAnalysis {
		
}

enum ProblemStatus {	
	STATICALLY_CONFIRMED;
	INITIALLY_DISCARDED;
	WITNESS_REQUIRED;
	ERROR_CONFIRMED;
	ERROR_CONFIRMED_SPECULATIVE;
	ERROR_DISCARDED;
	ERROR_DISCARDED_DUE_TO_METAMODEL;
	USE_TIME_OUT;
	USE_INTERNAL_ERROR;
	IMPL_INTERNAL_ERROR;
	CANNOT_DETERMINE; //E.G. when there is not path 
	NOT_SUPPORTED_BY_USE;
	PROBLEMS_IN_PATH;
}

enum SeverityKind {
   ERROR = 0;
   WARNING = 1;
   STYLE_SUGGESTION  = 3;
   PERFORMANCE_SUGGESTION = 4;
}

abstract class Recovery {   
}

@namespace(uri="http://bento/analysis/atl/analysis/errors", prefix="atl_error")
package atl_error {
	abstract class LocalProblem extends Problem {
	   attr String[1] location;
	   attr String[0..1] fileLocation;
	   ref  EObject[1] element;
	   // This is because for some problems it is better to use other syntax
	   // element for the marker
	   ref  EObject[0..1] displayedElement;
	   // This is intended to record generically the element that is
	   // missing to disambiguate two problems over the same element 
	   attr Object[0..1] missing;
	   
	   val Recovery[0..1] recovery;
	}

    class ModelElement {
    	ref EClass[1] klass;
    	attr String[1] metamodelName;
    }

 	// Problem kinds
	abstract class RuntimeError { }
	abstract class Warning { }
	abstract class StyleHint { }
	abstract class PerformanceHint { }
	

	abstract class OclCompliance { }	// needed?
	abstract class OclComplianceProblem extends LocalProblem {}
	
	abstract class NavigationProblem extends LocalProblem {	}
	abstract class InvalidArgumentProblem extends LocalProblem { }
	abstract class TargetModelConformanceProblem extends LocalProblem { }


	@description(name="No binding for compulsory target feature", text="Applicable to references and string attributes without default value.")	 
	@info(prec="static", path="no", severity="error-target", when="model-dep", kind="tgt-typing", phase="analysis", source="none")	
	@ignorestring(name="no-binding-compulsory-feature")
	class NoBindingForCompulsoryFeature extends TargetModelConformanceProblem, BindingProblem {	   
		ref EObject[0..1] subrule;
		attr NoBindingForCompulsoryFeatureKind kind;
	}
	
	@description(name="Invalid assignment in imperative binding", text="Left and right types of a binding statement are not compatible")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="tgt-typing", phase="typing", source="none")	
	class InvalidAssignmentImperativeBinding extends BindingProblem {	   
	}
	
	enum NoBindingForCompulsoryFeatureKind {
		IN_NORMAL_RULE = 0;
		MISSING_SUBRULE	= 1;			
	}
	
	@description(name="Binding possibly unresolved", text="A binding may be unresolved if certain conditions hold")	 
	@info(prec="always-solver", path="yes", severity="warning-behaviour", when="model-dep", kind="trafo-rules", phase="analysis", source="none")		
	@ignorestring(name="unresolved-binding")
	class BindingPossiblyUnresolved extends BindingProblem, BindingResolution {
	   ref EClass[+] problematicClasses;
	   ref EClass[+] problematicClassesImplicit;
	}

	@description(name="No rule to resolve binding", text="No rule able to resolve the binding can be found")	 
	@info(prec="static", path="no", severity="warning-behaviour", when="model-dep", kind="trafo-rules", phase="analysis", source="none")	
	@ignorestring(name="unresolved-binding")
	class BindingWithoutRule extends BindingProblem, BindingResolution {			   
	}
	
	@description(name="Binding resolved by rule with invalid target", text="A rule may resolve a binding but its first output pattern will produce a target element incompatible with the binding feature")	 
	@info(prec="sometimes-solver", path="yes", severity="error-target", when="model-dep", kind="tgt-typing", phase="analysis", source="none")		
	@ignorestring(name="invalid-target")
	class BindingWithResolvedByIncompatibleRule extends BindingProblem, BindingResolution {
	}

	@description(name="Feature not found", text="Feature cannot be found in an object's class")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="src-typing", phase="typing", source="none")
	class FeatureNotFound extends NavigationProblem, RuntimeError {
		attr String[1] featureName;
		ref  types.Type[1] type;	   

		attr String[1] className;
		attr String[1] metamodelName;
	}

	@description(name="Operation not found", text="Operation cannot be found in an object's class")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="src-typing", phase="typing", source="none")	
	class OperationNotFound extends OperationCallInvalid, RuntimeError {
	}


	@description(name="Operation found in subtype", text="Operation cannot be found in an object's class, but found in subtype. The error may not happen depending on the program logic.")	 
	@info(prec="sometimes-solver", path="yes", severity="runtime-error", when="model-dep", kind="src-typing", phase="typing", source="none")
	@ignorestring(name="found-in-subtype")
	class OperationFoundInSubtype extends OperationNotFound, FoundInSubtype, RuntimeError {
	}

	abstract class FoundInSubtype { 
		ref EClass[*] possibleClasses;	
		ref EClass[*] missingClasses;
	}

	@description(name="Feature found in subtype", text="Feature cannot be found in an object's class, but found in subtype. The error may not happen depending on the program logic.")	 
	@info(prec="sometimes-solver", path="yes", severity="runtime-error", when="model-dep", kind="src-typing", phase="typing", source="none")
	@ignorestring(name="found-in-subtype")
	class FeatureFoundInSubtype extends FeatureNotFound, FoundInSubtype, RuntimeError {	
	}
	
    @description(name="Possible access to undefined feature", text="Source cardinality check", example="")	 
	@info(prec="sometimes-solver", path="yes", severity="runtime-error", when="model-dep", kind="navigation", phase="typing", source="OCL spec, tests")	
	@ignorestring(name="undefined-value")	
	class AccessToUndefinedValue extends LocalProblem {
		
	}	

    @description(name="Possible access to undefined feature via empty collection", text="Source cardinality check", example="")	 
	@info(prec="always-solver", path="yes", severity="runtime-error", when="model-dep", kind="navigation", phase="typing", source="OCL spec, tests")	
	@ignorestring(name="undefined-value")
	class AccessToUndefinedValue_ThroughEmptyCollection extends LocalProblem {
		
	}	
	
	class RuleConflicts extends BatchAnalysis {
		/* The actual problem should be aggregated into the global problem list, this is only a reference */
		ref ConflictingRuleSet[*] conflicts;
	}

	@description(name="Rule conflict", example="")	 
	@info(prec="sometimes-solver", path="yes", severity="runtime-error", when="model-dep", kind="trafo-rules", phase="analysis (separate)", source="")
	class ConflictingRuleSet extends Problem {
	    ref types.Metaclass[1] type;
		ref EObject[*] rules;
		attr Object[0..1] analyserInfo;
	}

	class TargetConformanceViolations extends BatchAnalysis {
		val BatchTargetConformanceIssue[*] targetIssues;
	}

	abstract class BatchTargetConformanceIssue extends Problem {
	}

	class TargetInvariantViolation extends BatchTargetConformanceIssue {
		attr String[1] invariantName;
	}

	// when: if the error will happen as soon as the transformation is loaded (always) or if the control flow needs to reach the error (model-dep)
	//       note that this is different from precision.
	@description(name="Collection operation over no collection (``$\rightarrow$'' vs. ``.'')", example="aClassInstance->select(...)")	 
	@info(prec="static", path="no", severity="warning-style", when="model-dep", kind="navigation", phase="typing", source="OCL spec, tests")
	class CollectionOperationOverNoCollectionError extends NavigationProblem, RuntimeError {	      
	}
	
	@description(name="Feature access in collection", text="Collections do not have features. Dot-notation cannot be used over them", example="Sequence { }.length")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="navigation", phase="typing", source="OCL spec, tests")
	class FeatureAccessInCollection extends NavigationProblem, RuntimeError {
	    attr String[1] featureName;
	}
	
	@description(name="Operation over collection type (``.'' vs. ``$\rightarrow$'')", text="", example="")	 
	@info(prec="static", path="no", severity="warning-style", when="model-dep", kind="navigation", phase="typing", source="OCL spec, tests")
	class OperationOverCollectionType extends OclComplianceProblem {
	}

	abstract class OperationCallInvalid extends NavigationProblem, RuntimeError {
		attr String[1] operationName;
		ref  types.Type[1] type;	   

		attr String[1] className;
		attr String[1] metamodelName;		
		
		ref types.Type[*] formalParameters;
		ref types.Type[*] actualParameters;
	}

	@description(name="Invalid number of actual parameters", text="The number of actual parameters does not match the formal parameters")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="src-typing", phase="typing", source="none")		
	class OperationCallInvalidNumberOfParameters extends OperationCallInvalid, RuntimeError {					
	}

	@description(name="Invalid actual parameter type", text="The types of the actual parameters does not match the formal parameters")	 
	@info(prec="static", path="no", severity="warning-behaviour", when="model-dep", kind="src-typing", phase="typing", source="none")			
	class OperationCallInvalidParameter extends OperationCallInvalid, RuntimeError {		
		attr String[*] blamedParameterNames;				
	}
	
	@description(name="Operation not found in ThisModule", text="Operation defined in the transformation scope cannot be found (i.e., invoked with thisModule.operation()).")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="src-typing", phase="typing", source="none")	
	class OperationNotFoundInThisModule extends NavigationProblem, RuntimeError {
		attr String[1] name;
		attr boolean[1] maybeRule = false;
	}

	@description(name="Attribute not found in ThisModule", text="Attribute defined in the transformation scope cannot be found (i.e., invoked with thisModule.operation()).")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="src-typing", phase="typing", source="none")		
	class AttributeNotFoundInThisModule extends NavigationProblem, RuntimeError {
		attr String[1] name;
	}

	@description(name="Feature not found in union type", text="Feature cannot be found in one or more of the possible types of an expression. Only applicable when an expression is deemed have several possible types.")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="src-typing", phase="typing", source="none")		
	@ignorestring(name="not-found-in-union")
	class FeatureNotFoundInUnionType extends NavigationProblem, RuntimeError {
		attr String[1] featureName;	   
	}
	
	@description(name="Invalid operator", text="Operator not applicable to a certain type.")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="navigation", phase="typing", source="none")		
	class InvalidOperator extends InvalidArgumentProblem, RuntimeError {
	   attr String[1] operatorSymbol;	   
	   ref  types.Type[1] type;	
	}	  

	@description(name="Invalid operand", text="Operand of the wrong type.")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="navigation", phase="typing", source="none")		
	class InvalidOperand extends NavigationProblem, RuntimeError {
	   attr String[1] operatorSymbol;	   
	   ref  types.Type[1] type;	
	}

	@description(name="Object without container", text="A call to refImmediateComposite() will *always* result in OclUndefined.", example="
		Given a root class, e.g., MyClassModel, the expression
	    aClassModel.refImmediateComposite() will always return null.	
	")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="src-typing", phase="typing", source="none")
	class NoContainerForRefImmediateComposite extends NavigationProblem {
		attr String[1] className;
		attr String[1] metamodelName;			   
	}

	@disabled
	@description(name="Different branch types", text="[Disabled] The types of both if branches should be compatible. Perhaps this should be part of ocl compliance checkings...")	 
	@info(prec="static", path="no", severity="warning-ocl", when="model-dep", kind="navigation", phase="typing", source="none")
	class DifferentBranchTypes extends NavigationProblem, Warning {
	   ref types.Type[1] thenType;
	   ref types.Type[1] elseType;
	}
	
	abstract class BindingProblem extends LocalProblem {
		ref ecore.EStructuralFeature[0..1] feature;
		attr String[1] featureName;
	}

	abstract class ResolveTempProblem extends LocalProblem {
	}

	@description(name="Could not assign a derived featuer", text="The binding feature has the isDerived flag (i.e., it is a readonly feature)")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="tgt-typing", phase="analysis", source="none")
	class AssignmentToReadonlyFeature extends BindingProblem {
		
	}

	@description(name="Collection assigned to mono-valued binding", text="The binding feature is mono-valued but the right part of the binding is a collection")	 
	@info(prec="static", path="no", severity="error-target", when="model-dep", kind="tgt-typing", phase="analysis", source="none")
	class BindingExpectedOneAssignedMany extends BindingProblem {
	}	

	@description(name="Model element assigned to primitive binding", text="The binding feature is a primitive type but the right part is a model element")	 
	@info(prec="static", path="no", severity="error-target", when="model-dep", kind="tgt-typing", phase="analysis", source="none")	
	class PrimitiveBindingButObjectAssigned extends BindingProblem {	
	}
	
	@description(name="Primitive value assigned to object binding", text="The binding feature is a reference but the right part is a primitive value")	 
	@info(prec="static", path="no", severity="error-target", when="model-dep", kind="tgt-typing", phase="analysis", source="none")	
	class ObjectBindingButPrimitiveAssigned extends BindingProblem {		
	}

	@description(name="Incompatible primitive value for primitive binding", text="The binding feature is primitive but the right part is a non-compatible primitive value")	 
	@info(prec="static", path="no", severity="error-target", when="model-dep", kind="tgt-typing", phase="analysis", source="none")	
	class PrimitiveBindingInvalidAssignment extends BindingProblem {	
	}

	abstract class BindingResolution {
	   	ref ecore.EClass[1] rightType;	
		ref ecore.EClass[1] targetType;

        // Transitioning from eclass references to model elements
	    val ModelElement[1] right;
	    val ModelElement[1] left;
	    
		val ResolvedRuleInfo[*] rules;
	}
	
	class ResolvedRuleInfo {	   	
	   	attr String[1] location;
	   	ref  EObject[1] element;
	   	ref  EObject[1..*] allInvolvedRules;
	   	
	   	attr String[1] ruleName;
	   	
		ref ecore.EClass[0..1] inputType;  
		ref ecore.EClass[0..1] outputType;  
	}

	@description(name="No rule to resolve a resolveTemp operation", text="No rule able to resolve the resolveTemp operation can be found")	 
	@info(prec="static", path="no", severity="warning-behaviour", when="model-dep", kind="trafo-rules", phase="typing", source="none")
	@ignorestring(name="unresolved-resolvedtemp")			
	class ResolveTempWithoutRule extends ResolveTempProblem {			   
	   	ref ecore.EClass[0..1] sourceType;
	}

	@description(name="ResolveTemp possibly unresolved", text="A resolve temp be unresolved if certain conditions hold")	 
	@info(prec="always-solver", path="yes", severity="warning-behaviour", when="model-dep", kind="trafo-rules", phase="analysis", source="none")
	@ignorestring(name="unresolved-resolvedtemp")		
	class ResolveTempPossiblyUnresolved extends ResolveTempProblem, BindingResolution {
	   ref EClass[+] problematicClasses;
	   ref EClass[+] problematicClassesImplicit;
	   
	   ref EObject[1] resolvedExpression;
	}

	@description(name="Undefined output pattern in resolveTemp operation", text="The given output pattern of the possible matched rules is not defined")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="trafo-rules", phase="typing", source="none")			
	class ResolveTempOutputPatternElementNotFound extends ResolveTempProblem {			   
	   	ref ecore.EClass[0..1] sourceType;
		val ResolvedRuleInfo[*] rules;	   	
	}

	@description(name="Flatten over non-nested collection", text="Example: Sequence {'a', 'b'}->flatten()")	 
	@info(code="401",prec="static", path="no", severity="warning-perf", when="model-dep", kind="navigation", phase="typing", source="none")			
	class FlattenOverNonNestedCollection extends LocalProblem {	   
	}

	@description(name="Change select-first for any", text="Example: Sequence {'a', 'b'}->select(v | v = 'a')->first()")	 
	@info(prec="static", path="no", severity="warning-perf", when="model-dep", kind="navigation", phase="typing", source="none")			
	class ChangeSelectFirstForAny extends LocalProblem {	   
	}
	
	@description(name="Iterator over empty collection", text="Example: Sequence { }->select(...)")	 
	@info(prec="static", path="no", severity="warning-behaviour", when="model-dep", kind="navigation", phase="typing", source="none")			
	class IteratorOverEmptySequence extends LocalProblem {
	}

	@description(name="Invalid operator usage", text="Example: attr.visibility = 'public'")	 
	@info(prec="static", path="no", severity="warning-behaviour", when="model-dep", kind="navigation", phase="typing", source="none")			
	class InvalidOperatorUsage  extends LocalProblem {
	}
	
	@description(name="Read access to target model", text="[DISABLE?] False positives when the same meta-model is used as source and target")	 
	@info(prec="static", path="no", severity="warning-behaviour", when="model-dep", kind="trafo-integrity", phase="typing", source="none")			
	class ReadingTargetModel extends LocalProblem {
		attr String[1] modelName;
	}
	
	@description(name="Creation of source elements", text="Source elements should not appear in the 'to' part of rules'")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="trafo-integrity", phase="typing", source="none")			
	class WritingSourceModel extends LocalProblem {
		attr String[1] modelName;
	}
	

	@description(name="Lazy rule with filter", text="In practice filters in lazy rules are not evaluated")	 
	@info(prec="static", path="no", severity="warning-behaviour", when="model-dep", kind="trafo-integrity", phase="typing", source="none")			
	class LazyRuleWithFilter extends LocalProblem {		
	}

	@description(name="Invalid rule inheritance", text="Problems with rule inheritance of diverse kind")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="trafo-integrity", phase="typing", source="none")			
	class InvalidRuleInheritance extends LocalProblem {
		attr InvalidRuleInheritanceKind[1] kind;		
	}
	
	enum InvalidRuleInheritanceKind {
		DIFFERENT_NUMBER_OF_IPE;
		OTHER;
	}
	

	@disabled
	@description(name="Ambiguous model reference", text="[TODO]: Implemented but need to find an example")	 
	@info(prec="static", path="no", severity="warning-behaviour", when="model-dep", kind="navigation", phase="analysis", source="none")			
	class AmbiguousTargetModelReference extends LocalProblem {
		attr String[1] modelName;		
	}

	@description(name="Invalid meta-model name", text="The specified model is not declared")	 
	@info(prec="static", path="no", severity="error-load", when="trafo-dep", kind="src-typing", phase="typing", source="none")			
	class NoModelFound extends LocalProblem {
		attr String[1] modelName;				
	}

	@description(name="Enum literal not found", text="There is no enum declaration with the given enum literal")	 
	@info(prec="static", path="no", severity="error-load", when="trafo-dep", kind="src-typing", phase="typing", source="none")
	class NoEnumLiteral extends LocalProblem {
		attr String[1] literal;				
	}
	
	abstract class WrongType extends LocalProblem {
		
	}
	
	@description(name="Wrong iterator body type", text="The inferred type of the iterator body is not compatible with the type expected by the iterator ")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="navigation", phase="typing", source="none")			
	class IteratorBodyWrongType extends WrongType {
		
	}

	@description(name="Matched rule without output pattern", text="This should be checked by the parser")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="trafo-integrity", phase="typing", source="none")			
	class MatchedRuleWithoutOutputPattern extends LocalProblem {
		// Possibly using the matched rule as entrypint rule (see Measure2XHTML)
	}

	@description(name="Matched rule with non-boolean filter", text="The filter of a matched rule must be boolean")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="trafo-integrity", phase="typing", source="none")			
	class MatchedRuleFilterNonBoolean extends LocalProblem {
	}

	@description(name="Foreach statement expected collection", text="")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="navigation", phase="typing", source="none")			
	class ExpectedCollectionInForEach extends LocalProblem {
		
	}

	@description(name="Invalid meta-class name", text="The meta-class name cannot be found in the meta-model")	 
	@info(prec="static", path="no", severity="error-load", when="trafo-dep", kind="src-typing", phase="typing", source="none")			
	class NoClassFoundInMetamodel extends LocalProblem {
		attr String[1] className;
	}

	// TODO: Replace with the other class to signal this kind of problems
	@description(name="Invalid argument for built-in function", text="")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="navigation", phase="typing", source="none")			
	class InvalidArgument extends LocalProblem {
		
	}

	@description(name="Collection operation not found", text="")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="navigation", phase="typing", source="none")
	class CollectionOperationNotFound extends LocalProblem {
		attr String[1] operationName;	
	}

	@description(name="Iterator over no collection type", text="", example="anObject->select(...)")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="navigation", phase="typing", source="OCL spec, tests")
	class IteratorOverNoCollectionType extends LocalProblem {
		attr String[1] iteratorName;	
	}

	abstract class AbstractIncoherentVariableDeclaration extends LocalProblem, OclCompliance {
		ref  types.Type[1] inferred;	   
		ref  types.Type[1] declared;	   		
	}	

	@description(name="Incoherent variable declaration", text="The declared and the inferred type are not compatible", example="")	 
	@info(prec="static", path="no", severity="warning-style", when="model-dep", kind="src-typing", phase="typing", source="OCL spec, tests")	
	class IncoherentVariableDeclaration extends AbstractIncoherentVariableDeclaration {   		
	}
	
	@description(name="Incoherent helper return type", text="The declared and the inferred return type are not compatible", example="")	 
	@info(prec="static", path="no", severity="warning-style", when="model-dep", kind="src-typing", phase="typing", source="OCL spec, tests")	
	class IncoherentHelperReturnType extends AbstractIncoherentVariableDeclaration {   		
	}
		
    @disabled    	
	@description(name="Invalid in-place binding assignment", text="", example="")	 
	@info(prec="static", path="yes", severity="error-target", when="model-dep", kind="tgt-typing", phase="analysis", source="")	
	class BindingInplaceInvalid extends BindingProblem {
		ref types.Type[1] rightType;
	}	
	
	@description(name="Abstract class instantiation", text="", example="")	 
	@info(prec="static", path="no", severity="runtime-error", when="model-dep", kind="trafo-integrity", phase="typing", source="")	
	class CannotInstantiateAbstractClass extends LocalProblem {
		ref types.Metaclass[1] type;
	}	

	@description(name="Generic local problem", text="", example="")	 
	@info(prec="static", path="no", severity="warning-behaviour", when="model-dep", kind="src-typing", phase="typing", source="")
	class GenericLocalProblem extends LocalProblem {
		attr String[1] genericKind;
	}
}

@namespace(uri="http://bento/analysis/atl/analysis/recovery", prefix="atl_recovery")
package atl_recovery {
	/*
	class FeatureFoundInSubclass extends Recovery {
		attr String[1] subclassName;
		ref  EClass[1] subclass;
	}
	*/
	
	class TentativeTypeAssigned extends Recovery {
	   ref types.Type[1] type;
	}
}
// References to typing ... 

@namespace(uri="http://bento/analysis/atl/analysis/errors/ide", prefix="ide_error")
package ide_error {
	class CouldNotLoadMetamodel extends atl_error.LocalProblem {
		attr String[1] uri;	
	}

	class PreconditionParseError extends atl_error.LocalProblem {
		attr String[*] messages;	
	}

}

/* Others errors that coud be checked */
/* - Invalid uses of oclIsKindOf (those that do not make sense) */
/* - Misuses of abstract classes */
