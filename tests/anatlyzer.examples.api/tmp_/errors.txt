third-party/largeprojects/modisco/java2kdm/javaToKdm.atl
anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1001:47-1001:61): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.returnType(thisModule).isUndefined()
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1005:4-1005:35): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then src.parameters->select(i1|not (i1.isUndefined()))->exists(_problem_|if SingleVariableDeclaration.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(SingleVariableDeclaration) in
	src2.methodDeclaration.isUndefined()
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.OperationNotFoundImpl (1030:9-1030:77): 
ThisModule.allInstances()->exists(thisModule|Comment.allInstances()->exists(src|if ((not (src.refImmediateComposite().oclIsTypeOf(AnonymousClassDeclaration))) and (not (src.refImmediateComposite().oclIsTypeOf(ImportDeclaration)))) and (not ((src.refImmediateComposite().oclIsKindOf(Expression)) and (thisModule->filterExpression(src.refImmediateComposite())->isEmpty())))
	then not (thisModule->filterExpression(src.refImmediateComposite()).isUndefined())
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (1046:3-1046:14): 
ThisModule.allInstances()->exists(thisModule|(AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else let src1 = src in
	let redefined2 = src.redefinedMethodDeclaration(thisModule) in
	not (src1.isUndefined())
	endif
	endif
	else false
	endif)) or (AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else let src3 = src in
	let redefined4 = src.redefinedMethodDeclaration(thisModule) in
	not (src3.isUndefined())
	endif
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (1047:4-1047:19): 
ThisModule.allInstances()->exists(thisModule|(AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else let src1 = src in
	let redefined2 = src.redefinedMethodDeclaration(thisModule) in
	not (redefined2.isUndefined())
	endif
	endif
	else false
	endif)) or (AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else let src3 = src in
	let redefined4 = src.redefinedMethodDeclaration(thisModule) in
	not (redefined4.isUndefined())
	endif
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (106:5-106:85): 
ThisModule.allInstances()->exists(thisModule|Model.allInstances()->exists(src|src.orphanTypes->select(e|not (e.oclIsKindOf(PrimitiveType)))->select(i1|not (i1.isUndefined()))->exists(_problem_|((((((((((((((((((not (if ClassDeclaration.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(ClassDeclaration) in
	src2.typeParameters.isEmpty()
	else false
	endif)) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(InterfaceDeclaration) in
	src3.typeParameters.isEmpty()
	else false
	endif))) and (not (if EnumDeclaration.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(ClassDeclaration) in
	not (src4.typeParameters.isEmpty())
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_)
	then let src5 = _problem_.oclAsType(InterfaceDeclaration) in
	not (src5.typeParameters.isEmpty())
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (1095:5-1099:10): 
ThisModule.allInstances()->exists(thisModule|(AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.returnType(thisModule).isUndefined()
	then false
	else let src1 = src.returnType(thisModule) in
	not (if src1.originalCompilationUnit.isUndefined()
	then src1.originalClassFile
	else src1.originalCompilationUnit
	endif.isUndefined())
	endif
	endif
	else false
	endif)) or (AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.returnType(thisModule).isUndefined()
	then false
	else let src2 = src.returnType(thisModule) in
	not (if src2.originalCompilationUnit.isUndefined()
	then src2.originalClassFile
	else src2.originalCompilationUnit
	endif.isUndefined())
	endif
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (1124:5-1128:10): 
ThisModule.allInstances()->exists(thisModule|(AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then src.thrownExceptions->exists(e|let src1 = e in
	not (if src1.originalCompilationUnit.isUndefined()
	then src1.originalClassFile
	else src1.originalCompilationUnit
	endif.isUndefined()))
	else false
	endif)) or (AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then src.thrownExceptions->exists(e|let src2 = e in
	not (if src2.originalCompilationUnit.isUndefined()
	then src2.originalClassFile
	else src2.originalCompilationUnit
	endif.isUndefined()))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1176:4-1176:63): 
ThisModule.allInstances()->exists(thisModule|AssertStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1176:4-1176:63): 
ThisModule.allInstances()->exists(thisModule|AssertStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1177:4-1177:100): 
ThisModule.allInstances()->exists(thisModule|AssertStatement.allInstances()->exists(src|if src.message.isUndefined()
	then Sequence {  }
	else Sequence { src.message }
	endif->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1177:4-1177:100): 
ThisModule.allInstances()->exists(thisModule|AssertStatement.allInstances()->exists(src|if src.message.isUndefined()
	then Sequence {  }
	else Sequence { src.message }
	endif->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1209:4-1209:20): 
ThisModule.allInstances()->exists(thisModule|((((ConstructorInvocation.allInstances()->exists(src|if src.method.isUndefined()
	then false
	else if src.method.typeParameters.isEmpty()
	then let src1 = src in
	let _problem_2 = src1.method in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_2)
	then let src3 = _problem_2.oclAsType(AbstractMethodDeclaration) in
	not (src3.typeParameters.isEmpty())
	else false
	endif
	else false
	endif
	endif)) or (SuperConstructorInvocation.allInstances()->exists(src|if src.method.isUndefined()
	then false
	else if src.method.typeParameters.isEmpty()
	then let src4 = src in
	let _problem_5 = src4.method in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_5)
	then let src6 = _problem_5.oclAsType(AbstractMethodDeclaration) in
	not (src6.typeParameters.isEmpty())
	else false
	endif
	else false
	endif
	endif))) or (ClassInstanceCreation.allInstances()->exists(src|if src.method.isUndefined()
	then false
	else let src7 = src in
	let _problem_8 = src7.method in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_8)
	then let src9 = _problem_8.oclAsType(AbstractMethodDeclaration) in
	not (src9.typeParameters.isEmpty())
	else false
	endif
	endif))) or (MethodInvocation.allInstances()->exists(src|if src.method.isUndefined()
	then false
	else if src.method.typeParameters.isEmpty()
	then let src10 = src in
	let _problem_11 = src10.method in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_11)
	then let src12 = _problem_11.oclAsType(AbstractMethodDeclaration) in
	not (src12.typeParameters.isEmpty())
	else false
	endif
	else false
	endif
	endif))) or (SuperMethodInvocation.allInstances()->exists(src|if src.method.isUndefined()
	then false
	else if src.method.typeParameters.isEmpty()
	then let src13 = src in
	let _problem_14 = src13.method in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_14)
	then let src15 = _problem_14.oclAsType(AbstractMethodDeclaration) in
	not (src15.typeParameters.isEmpty())
	else false
	endif
	else false
	endif
	endif)))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1218:10-1218:19): 
ThisModule.allInstances()->exists(thisModule|(BreakStatement.allInstances()->exists(src|if src.label.isUndefined()
	then false
	else let src1 = src in
	not (BreakStatement.allInstances()->includes(src1))
	endif)) or (ContinueStatement.allInstances()->exists(src|if src.label.isUndefined()
	then false
	else let src2 = src in
	not (BreakStatement.allInstances()->includes(src2))
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1218:4-1218:19): 
ThisModule.allInstances()->exists(thisModule|(BreakStatement.allInstances()->exists(src|if src.label.isUndefined()
	then false
	else let src1 = src in
	let _problem_2 = src1.label(thisModule) in
	if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif
	endif)) or (ContinueStatement.allInstances()->exists(src|if src.label.isUndefined()
	then false
	else let src3 = src in
	let _problem_4 = src3.label(thisModule) in
	if LabeledStatement.allInstances()->includes(_problem_4)
	then true
	else false
	endif
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1254:4-1254:109): 
ThisModule.allInstances()->exists(thisModule|SingleVariableDeclaration.allInstances()->exists(src|if src.methodDeclaration.isUndefined()
	then if src.initializer.isUndefined()
	then Sequence {  }
	else Sequence { src.initializer }
	endif->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1254:4-1254:109): 
ThisModule.allInstances()->exists(thisModule|SingleVariableDeclaration.allInstances()->exists(src|if src.methodDeclaration.isUndefined()
	then if src.initializer.isUndefined()
	then Sequence {  }
	else Sequence { src.initializer }
	endif->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif) or (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)) or (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif)) or (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1271:4-1271:32): 
ThisModule.allInstances()->exists(thisModule|ConstructorInvocation.allInstances()->exists(src|src.arguments->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1271:4-1271:32): 
ThisModule.allInstances()->exists(thisModule|ConstructorInvocation.allInstances()->exists(src|src.arguments->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1293:4-1293:63): 
ThisModule.allInstances()->exists(thisModule|DoStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1293:4-1293:63): 
ThisModule.allInstances()->exists(thisModule|DoStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1315:4-1315:63): 
ThisModule.allInstances()->exists(thisModule|EnhancedForStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1315:4-1315:63): 
ThisModule.allInstances()->exists(thisModule|EnhancedForStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1328:4-1328:63): 
ThisModule.allInstances()->exists(thisModule|ExpressionStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1328:4-1328:63): 
ThisModule.allInstances()->exists(thisModule|ExpressionStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1339:4-1339:63): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1339:4-1339:63): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1340:4-1340:35): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|src.initializers->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1340:4-1340:35): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|src.initializers->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1341:4-1341:31): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|src.updaters->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1341:4-1341:31): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|src.updaters->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1353:4-1353:63): 
ThisModule.allInstances()->exists(thisModule|IfStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1353:4-1353:63): 
ThisModule.allInstances()->exists(thisModule|IfStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1377:4-1377:63): 
ThisModule.allInstances()->exists(thisModule|ReturnStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1377:4-1377:63): 
ThisModule.allInstances()->exists(thisModule|ReturnStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1395:19-1395:89): 
ThisModule.allInstances()->exists(thisModule|SuperConstructorInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1395:4-1395:89): 
ThisModule.allInstances()->exists(thisModule|SuperConstructorInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1395:4-1395:89): 
ThisModule.allInstances()->exists(thisModule|SuperConstructorInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1396:4-1396:63): 
ThisModule.allInstances()->exists(thisModule|SuperConstructorInvocation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1396:4-1396:63): 
ThisModule.allInstances()->exists(thisModule|SuperConstructorInvocation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1407:4-1407:63): 
ThisModule.allInstances()->exists(thisModule|SwitchCase.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1407:4-1407:63): 
ThisModule.allInstances()->exists(thisModule|SwitchCase.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1418:4-1418:63): 
ThisModule.allInstances()->exists(thisModule|SwitchStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1418:4-1418:63): 
ThisModule.allInstances()->exists(thisModule|SwitchStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1430:4-1430:63): 
ThisModule.allInstances()->exists(thisModule|SynchronizedStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1430:4-1430:63): 
ThisModule.allInstances()->exists(thisModule|SynchronizedStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1442:4-1442:63): 
ThisModule.allInstances()->exists(thisModule|ThrowStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1442:4-1442:63): 
ThisModule.allInstances()->exists(thisModule|ThrowStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1480:4-1481:52): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationStatement.allInstances()->exists(src|src.fragments->select(fragment|fragment.initializer.oclIsTypeOf(ClassInstanceCreation))->collect(fragment|fragment.initializer)->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1480:4-1481:52): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationStatement.allInstances()->exists(src|src.fragments->select(fragment|fragment.initializer.oclIsTypeOf(ClassInstanceCreation))->collect(fragment|fragment.initializer)->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1503:11-1503:47): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationFragment.allInstances()->exists(src|if not (src.variablesContainer.oclIsKindOf(FieldDeclaration))
	then if src.refImmediateComposite().oclIsTypeOf(Model)
	then false
	else if not (src.refImmediateComposite().isUndefined())
	then not (FieldDeclaration.allInstances()->includes(src.refImmediateComposite()))
	else false
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1506:8-1506:44): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationFragment.allInstances()->exists(src|if not (src.variablesContainer.oclIsKindOf(FieldDeclaration))
	then if src.refImmediateComposite().oclIsTypeOf(Model)
	then false
	else if src.refImmediateComposite().modifier(thisModule).isUndefined()
	then false
	else if not (src.refImmediateComposite().isUndefined())
	then not (FieldDeclaration.allInstances()->includes(src.refImmediateComposite()))
	else false
	endif
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1527:4-1536:10): 
ThisModule.allInstances()->exists(thisModule|(VariableDeclarationFragment.allInstances()->exists(src|if not (src.variablesContainer.oclIsKindOf(FieldDeclaration))
	then if src.initializer.isUndefined()
	then false
	else let src1 = src in
	let value2 = src.initializer in
	let _problem_3 = if value2.oclIsTypeOf(SingleVariableAccess)
	then value2.variable(thisModule)
	else if value2.oclIsTypeOf(UnresolvedItemAccess)
	then thisModule->CreateDatatype(value2)
	else value2
	endif
	endif in
	(not (_problem_3.isUndefined())) and (((((((((((((((((((((((((((((((not (if EnumConstantDeclaration.allInstances()->includes(_problem_3)
	then true
	else false
	endif)) and (not (if SingleVariableDeclaration.allInstances()->includes(_problem_3)
	then let src4 = _problem_3.oclAsType(SingleVariableDeclaration) in
	if src4.methodDeclaration.isUndefined()
	then false
	else true
	endif
	else false
	endif))) and (not (if SingleVariableDeclaration.allInstances()->includes(_problem_3)
	then let src5 = _problem_3.oclAsType(SingleVariableDeclaration) in
	src5.methodDeclaration.isUndefined()
	else false
	endif))) and (not (if VariableDeclarationFragment.allInstances()->includes(_problem_3)
	then let src6 = _problem_3.oclAsType(VariableDeclarationFragment) in
	not (src6.variablesContainer.oclIsKindOf(FieldDeclaration))
	else false
	endif))) and (not (if VariableDeclarationFragment.allInstances()->includes(_problem_3)
	then let src7 = _problem_3.oclAsType(VariableDeclarationFragment) in
	src7.variablesContainer.oclIsKindOf(FieldDeclaration)
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_3)
	then let src8 = _problem_3.oclAsType(Annotation) in
	not (src8.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_3)
	then let src9 = _problem_3.oclAsType(ArrayInitializer) in
	not (src9.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_3)
	then let src10 = _problem_3.oclAsType(StringLiteral) in
	not (src10.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif)))
	endif
	else false
	endif)) or (VariableDeclarationFragment.allInstances()->exists(src|if src.variablesContainer.oclIsKindOf(FieldDeclaration)
	then if src.initializer.isUndefined()
	then false
	else let src11 = src in
	let value12 = src.initializer in
	let _problem_13 = if value12.oclIsTypeOf(SingleVariableAccess)
	then value12.variable(thisModule)
	else if value12.oclIsTypeOf(UnresolvedItemAccess)
	then thisModule->CreateDatatype(value12)
	else value12
	endif
	endif in
	(not (_problem_13.isUndefined())) and (((((((((((((((((((((((((((((((not (if EnumConstantDeclaration.allInstances()->includes(_problem_13)
	then true
	else false
	endif)) and (not (if SingleVariableDeclaration.allInstances()->includes(_problem_13)
	then let src14 = _problem_13.oclAsType(SingleVariableDeclaration) in
	if src14.methodDeclaration.isUndefined()
	then false
	else true
	endif
	else false
	endif))) and (not (if SingleVariableDeclaration.allInstances()->includes(_problem_13)
	then let src15 = _problem_13.oclAsType(SingleVariableDeclaration) in
	src15.methodDeclaration.isUndefined()
	else false
	endif))) and (not (if VariableDeclarationFragment.allInstances()->includes(_problem_13)
	then let src16 = _problem_13.oclAsType(VariableDeclarationFragment) in
	not (src16.variablesContainer.oclIsKindOf(FieldDeclaration))
	else false
	endif))) and (not (if VariableDeclarationFragment.allInstances()->includes(_problem_13)
	then let src17 = _problem_13.oclAsType(VariableDeclarationFragment) in
	src17.variablesContainer.oclIsKindOf(FieldDeclaration)
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_13)
	then let src18 = _problem_13.oclAsType(Annotation) in
	not (src18.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_13)
	then let src19 = _problem_13.oclAsType(ArrayInitializer) in
	not (src19.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_13)
	then let src20 = _problem_13.oclAsType(StringLiteral) in
	not (src20.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif)))
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1527:4-1536:10): 
ThisModule.allInstances()->exists(thisModule|(VariableDeclarationFragment.allInstances()->exists(src|if not (src.variablesContainer.oclIsKindOf(FieldDeclaration))
	then if src.initializer.isUndefined()
	then false
	else let src1 = src in
	let value2 = src.initializer in
	let _problem_3 = if value2.oclIsTypeOf(SingleVariableAccess)
	then value2.variable(thisModule)
	else if value2.oclIsTypeOf(UnresolvedItemAccess)
	then thisModule->CreateDatatype(value2)
	else value2
	endif
	endif in
	if Annotation.allInstances()->includes(_problem_3)
	then let src4 = _problem_3.oclAsType(Annotation) in
	not (src4.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif
	endif
	else false
	endif)) or (VariableDeclarationFragment.allInstances()->exists(src|if src.variablesContainer.oclIsKindOf(FieldDeclaration)
	then if src.initializer.isUndefined()
	then false
	else let src5 = src in
	let value6 = src.initializer in
	let _problem_7 = if value6.oclIsTypeOf(SingleVariableAccess)
	then value6.variable(thisModule)
	else if value6.oclIsTypeOf(UnresolvedItemAccess)
	then thisModule->CreateDatatype(value6)
	else value6
	endif
	endif in
	if Annotation.allInstances()->includes(_problem_7)
	then let src8 = _problem_7.oclAsType(Annotation) in
	not (src8.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1586:4-1586:63): 
ThisModule.allInstances()->exists(thisModule|WhileStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1586:4-1586:63): 
ThisModule.allInstances()->exists(thisModule|WhileStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1655:3-1655:58): 
ThisModule.allInstances()->exists(thisModule|Annotation.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then let _problem_1 = src->filterRefImmediateCompositeForAnnotation() in
	((((if ConstructorInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif) or (if SuperConstructorInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) or (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) or (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) or (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1671:7-1671:45): 
ThisModule.allInstances()->exists(thisModule|Annotation.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then let genSelf1 = src in
	if genSelf1.refImmediateComposite().oclIsTypeOf(FieldDeclaration)
	then not (genSelf1.refImmediateComposite().isUndefined())
	else false
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1674:4-1674:42): 
ThisModule.allInstances()->exists(thisModule|Annotation.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then let genSelf1 = src in
	if genSelf1.refImmediateComposite().oclIsTypeOf(FieldDeclaration)
	then if genSelf1.refImmediateComposite().fragments(thisModule)->isEmpty()
	then false
	else not (genSelf1.refImmediateComposite().isUndefined())
	endif
	else false
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1678:4-1678:42): 
ThisModule.allInstances()->exists(thisModule|Annotation.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then let genSelf1 = src in
	if genSelf1.refImmediateComposite().oclIsTypeOf(FieldDeclaration)
	then false
	else if genSelf1.refImmediateComposite().oclIsTypeOf(VariableDeclarationStatement)
	then not (genSelf1.refImmediateComposite().isUndefined())
	else false
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1692:3-1692:38): 
ThisModule.allInstances()->exists(thisModule|(ArrayCreation.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src1 = src.type in
	let _problem_2 = src1.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_2)
	then let src3 = _problem_2.oclAsType(AbstractMethodDeclaration) in
	src3.typeParameters.isEmpty()
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_2)
	then let src4 = _problem_2.oclAsType(AbstractMethodDeclaration) in
	not (src4.typeParameters.isEmpty())
	else false
	endif)
	endif)) or (ClassInstanceCreation.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src5 = src.type in
	let _problem_6 = src5.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_6)
	then let src7 = _problem_6.oclAsType(AbstractMethodDeclaration) in
	src7.typeParameters.isEmpty()
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_6)
	then let src8 = _problem_6.oclAsType(AbstractMethodDeclaration) in
	not (src8.typeParameters.isEmpty())
	else false
	endif)
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (170:4-174:10): 
ThisModule.allInstances()->exists(thisModule|(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((Initializer.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined()))) or (ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (InterfaceDeclaration.allInstances()->exists(src|let javaAttributes2 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (EnumDeclaration.allInstances()->exists(src|let javaAttributes3 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (AnnotationTypeDeclaration.allInstances()->exists(src|let javaAttributes4 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (AnnotationTypeMemberDeclaration.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (FieldDeclaration.allInstances()->exists(src|if src.fragments->isEmpty()
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (EnumConstantDeclaration.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (SingleVariableDeclaration.allInstances()->exists(src|if if src.methodDeclaration.isUndefined()
	then false
	else true
	endif
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (SingleVariableDeclaration.allInstances()->exists(src|if src.methodDeclaration.isUndefined()
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (VariableDeclarationFragment.allInstances()->exists(src|if not (src.variablesContainer.oclIsKindOf(FieldDeclaration))
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (VariableDeclarationFragment.allInstances()->exists(src|if src.variablesContainer.oclIsKindOf(FieldDeclaration)
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (AnonymousClassDeclaration.allInstances()->exists(src|let javaAttributes5 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let originalTypeAccess6 = src.refImmediateComposite().type in
	let tgt7 = oclUndefined(OclVoid) in
	not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (Block.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (AssertStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (BreakStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (CatchClause.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ConstructorInvocation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ContinueStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (DoStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (EmptyStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (EnhancedForStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ExpressionStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ForStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (IfStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (LabeledStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ReturnStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (SuperConstructorInvocation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (SwitchCase.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (SwitchStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (SynchronizedStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ThrowStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (TypeDeclarationStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (TryStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (VariableDeclarationStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (WhileStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ArrayAccess.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ArrayCreation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ArrayInitializer.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (ArrayLengthAccess.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (Assignment.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (BooleanLiteral.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (CastExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (CharacterLiteral.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ClassInstanceCreation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ConditionalExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (FieldAccess.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (InfixExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (InstanceofExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (MethodInvocation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (NullLiteral.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (NumberLiteral.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ParenthesizedExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (PostfixExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (PrefixExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (StringLiteral.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (SuperFieldAccess.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (SuperMethodInvocation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ThisExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (TypeLiteral.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (VariableDeclarationExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined()))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1742:3-1742:14): 
Dead code

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1764:4-1764:58): 
ThisModule.allInstances()->exists(thisModule|ArrayAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.array) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1764:4-1764:58): 
ThisModule.allInstances()->exists(thisModule|ArrayAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.array) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1774:4-1774:58): 
ThisModule.allInstances()->exists(thisModule|ArrayAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.index) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1774:4-1774:58): 
ThisModule.allInstances()->exists(thisModule|ArrayAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.index) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1786:19-1786:90): 
ThisModule.allInstances()->exists(thisModule|ArrayCreation.allInstances()->exists(src|src.dimensions->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1786:4-1786:90): 
ThisModule.allInstances()->exists(thisModule|ArrayCreation.allInstances()->exists(src|src.dimensions->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1786:4-1786:90): 
ThisModule.allInstances()->exists(thisModule|ArrayCreation.allInstances()->exists(src|src.dimensions->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1787:4-1787:64): 
ThisModule.allInstances()->exists(thisModule|ArrayCreation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.initializer) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1787:4-1787:64): 
ThisModule.allInstances()->exists(thisModule|ArrayCreation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.initializer) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1801:19-1802:65): 
ThisModule.allInstances()->exists(thisModule|ArrayInitializer.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then src.expressions->select(e|not (e.oclIsTypeOf(Annotation)))->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1801:4-1802:65): 
ThisModule.allInstances()->exists(thisModule|ArrayInitializer.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then src.expressions->select(e|not (e.oclIsTypeOf(Annotation)))->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1801:4-1802:65): 
ThisModule.allInstances()->exists(thisModule|ArrayInitializer.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then src.expressions->select(e|not (e.oclIsTypeOf(Annotation)))->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1816:4-1816:58): 
ThisModule.allInstances()->exists(thisModule|ArrayLengthAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.array) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1816:4-1816:58): 
ThisModule.allInstances()->exists(thisModule|ArrayLengthAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.array) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1836:4-1836:65): 
ThisModule.allInstances()->exists(thisModule|Assignment.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftHandSide) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1836:4-1836:65): 
ThisModule.allInstances()->exists(thisModule|Assignment.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftHandSide) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1845:4-1845:66): 
ThisModule.allInstances()->exists(thisModule|Assignment.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.rightHandSide) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1845:4-1845:66): 
ThisModule.allInstances()->exists(thisModule|Assignment.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.rightHandSide) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1876:4-1876:63): 
ThisModule.allInstances()->exists(thisModule|CastExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1876:4-1876:63): 
ThisModule.allInstances()->exists(thisModule|CastExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1885:3-1885:38): 
ThisModule.allInstances()->exists(thisModule|((((CastExpression.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src1 = src.type in
	let _problem_2 = src1.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_2)
	then let src3 = _problem_2.oclAsType(AbstractMethodDeclaration) in
	src3.typeParameters.isEmpty()
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_2)
	then let src4 = _problem_2.oclAsType(AbstractMethodDeclaration) in
	not (src4.typeParameters.isEmpty())
	else false
	endif)
	endif)) or (InstanceofExpression.allInstances()->exists(src|if src.rightOperand.isUndefined()
	then false
	else let src5 = src.rightOperand in
	let _problem_6 = src5.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_6)
	then let src7 = _problem_6.oclAsType(AbstractMethodDeclaration) in
	src7.typeParameters.isEmpty()
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_6)
	then let src8 = _problem_6.oclAsType(AbstractMethodDeclaration) in
	not (src8.typeParameters.isEmpty())
	else false
	endif)
	endif))) or (SuperFieldAccess.allInstances()->exists(src|if src.field.isUndefined()
	then false
	else let src9 = src.field in
	let _problem_10 = src9.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_10)
	then let src11 = _problem_10.oclAsType(AbstractMethodDeclaration) in
	src11.typeParameters.isEmpty()
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_10)
	then let src12 = _problem_10.oclAsType(AbstractMethodDeclaration) in
	not (src12.typeParameters.isEmpty())
	else false
	endif)
	endif))) or (ThisExpression.allInstances()->exists(src|if src.qualifier.isUndefined()
	then false
	else let src13 = src.qualifier in
	let _problem_14 = src13.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_14)
	then let src15 = _problem_14.oclAsType(AbstractMethodDeclaration) in
	src15.typeParameters.isEmpty()
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_14)
	then let src16 = _problem_14.oclAsType(AbstractMethodDeclaration) in
	not (src16.typeParameters.isEmpty())
	else false
	endif)
	endif))) or (VariableDeclarationExpression.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src17 = src.type in
	let _problem_18 = src17.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_18)
	then let src19 = _problem_18.oclAsType(AbstractMethodDeclaration) in
	src19.typeParameters.isEmpty()
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_18)
	then let src20 = _problem_18.oclAsType(AbstractMethodDeclaration) in
	not (src20.typeParameters.isEmpty())
	else false
	endif)
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1886:4-1886:18): 
ThisModule.allInstances()->exists(thisModule|((((CastExpression.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src1 = src.type in
	let _problem_2 = src1.type in
	(not (_problem_2.isUndefined())) and (((((((((((((((((((not (if ClassDeclaration.allInstances()->includes(_problem_2)
	then let src3 = _problem_2.oclAsType(ClassDeclaration) in
	src3.typeParameters.isEmpty()
	else false
	endif)) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_2)
	then let src4 = _problem_2.oclAsType(InterfaceDeclaration) in
	src4.typeParameters.isEmpty()
	else false
	endif))) and (not (if EnumDeclaration.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_2)
	then let src5 = _problem_2.oclAsType(ClassDeclaration) in
	not (src5.typeParameters.isEmpty())
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_2)
	then let src6 = _problem_2.oclAsType(InterfaceDeclaration) in
	not (src6.typeParameters.isEmpty())
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_2)
	then true
	else false
	endif)))
	endif)) or (InstanceofExpression.allInstances()->exists(src|if src.rightOperand.isUndefined()
	then false
	else let src7 = src.rightOperand in
	let _problem_8 = src7.type in
	(not (_problem_8.isUndefined())) and (((((((((((((((((((not (if ClassDeclaration.allInstances()->includes(_problem_8)
	then let src9 = _problem_8.oclAsType(ClassDeclaration) in
	src9.typeParameters.isEmpty()
	else false
	endif)) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_8)
	then let src10 = _problem_8.oclAsType(InterfaceDeclaration) in
	src10.typeParameters.isEmpty()
	else false
	endif))) and (not (if EnumDeclaration.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_8)
	then let src11 = _problem_8.oclAsType(ClassDeclaration) in
	not (src11.typeParameters.isEmpty())
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_8)
	then let src12 = _problem_8.oclAsType(InterfaceDeclaration) in
	not (src12.typeParameters.isEmpty())
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_8)
	then true
	else false
	endif)))
	endif))) or (SuperFieldAccess.allInstances()->exists(src|if src.field.isUndefined()
	then false
	else let src13 = src.field in
	let _problem_14 = src13.type in
	(not (_problem_14.isUndefined())) and (((((((((((((((((((not (if ClassDeclaration.allInstances()->includes(_problem_14)
	then let src15 = _problem_14.oclAsType(ClassDeclaration) in
	src15.typeParameters.isEmpty()
	else false
	endif)) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_14)
	then let src16 = _problem_14.oclAsType(InterfaceDeclaration) in
	src16.typeParameters.isEmpty()
	else false
	endif))) and (not (if EnumDeclaration.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_14)
	then let src17 = _problem_14.oclAsType(ClassDeclaration) in
	not (src17.typeParameters.isEmpty())
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_14)
	then let src18 = _problem_14.oclAsType(InterfaceDeclaration) in
	not (src18.typeParameters.isEmpty())
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_14)
	then true
	else false
	endif)))
	endif))) or (ThisExpression.allInstances()->exists(src|if src.qualifier.isUndefined()
	then false
	else let src19 = src.qualifier in
	let _problem_20 = src19.type in
	(not (_problem_20.isUndefined())) and (((((((((((((((((((not (if ClassDeclaration.allInstances()->includes(_problem_20)
	then let src21 = _problem_20.oclAsType(ClassDeclaration) in
	src21.typeParameters.isEmpty()
	else false
	endif)) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_20)
	then let src22 = _problem_20.oclAsType(InterfaceDeclaration) in
	src22.typeParameters.isEmpty()
	else false
	endif))) and (not (if EnumDeclaration.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_20)
	then let src23 = _problem_20.oclAsType(ClassDeclaration) in
	not (src23.typeParameters.isEmpty())
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_20)
	then let src24 = _problem_20.oclAsType(InterfaceDeclaration) in
	not (src24.typeParameters.isEmpty())
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_20)
	then true
	else false
	endif)))
	endif))) or (VariableDeclarationExpression.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src25 = src.type in
	let _problem_26 = src25.type in
	(not (_problem_26.isUndefined())) and (((((((((((((((((((not (if ClassDeclaration.allInstances()->includes(_problem_26)
	then let src27 = _problem_26.oclAsType(ClassDeclaration) in
	src27.typeParameters.isEmpty()
	else false
	endif)) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_26)
	then let src28 = _problem_26.oclAsType(InterfaceDeclaration) in
	src28.typeParameters.isEmpty()
	else false
	endif))) and (not (if EnumDeclaration.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_26)
	then let src29 = _problem_26.oclAsType(ClassDeclaration) in
	not (src29.typeParameters.isEmpty())
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_26)
	then let src30 = _problem_26.oclAsType(InterfaceDeclaration) in
	not (src30.typeParameters.isEmpty())
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_26)
	then true
	else false
	endif)))
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1907:4-1907:63): 
ThisModule.allInstances()->exists(thisModule|ClassInstanceCreation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1907:4-1907:63): 
ThisModule.allInstances()->exists(thisModule|ClassInstanceCreation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1908:19-1908:89): 
ThisModule.allInstances()->exists(thisModule|ClassInstanceCreation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1908:4-1908:89): 
ThisModule.allInstances()->exists(thisModule|ClassInstanceCreation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1908:4-1908:89): 
ThisModule.allInstances()->exists(thisModule|ClassInstanceCreation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1924:4-1924:63): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1924:4-1924:63): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1925:4-1925:67): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.thenExpression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1925:4-1925:67): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.thenExpression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1926:4-1926:67): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.elseExpression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1926:4-1926:67): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.elseExpression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1937:4-1937:63): 
ThisModule.allInstances()->exists(thisModule|FieldAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1937:4-1937:63): 
ThisModule.allInstances()->exists(thisModule|FieldAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1957:4-1957:64): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftOperand) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1957:4-1957:64): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftOperand) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1958:4-1958:65): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.rightOperand) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1958:4-1958:65): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.rightOperand) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1959:19-1959:96): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|src.extendedOperands->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1959:4-1959:96): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|src.extendedOperands->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1959:4-1959:96): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|src.extendedOperands->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1970:4-1970:64): 
ThisModule.allInstances()->exists(thisModule|InstanceofExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftOperand) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1970:4-1970:64): 
ThisModule.allInstances()->exists(thisModule|InstanceofExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftOperand) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1982:4-1982:63): 
ThisModule.allInstances()->exists(thisModule|MethodInvocation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1982:4-1982:63): 
ThisModule.allInstances()->exists(thisModule|MethodInvocation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1983:19-1983:89): 
ThisModule.allInstances()->exists(thisModule|MethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1983:4-1983:89): 
ThisModule.allInstances()->exists(thisModule|MethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1983:4-1983:89): 
ThisModule.allInstances()->exists(thisModule|MethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (2024:4-2024:63): 
ThisModule.allInstances()->exists(thisModule|ParenthesizedExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (2024:4-2024:63): 
ThisModule.allInstances()->exists(thisModule|ParenthesizedExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (2035:4-2035:60): 
ThisModule.allInstances()->exists(thisModule|PostfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.operand) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (2035:4-2035:60): 
ThisModule.allInstances()->exists(thisModule|PostfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.operand) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (2046:4-2046:60): 
ThisModule.allInstances()->exists(thisModule|PrefixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.operand) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (2046:4-2046:60): 
ThisModule.allInstances()->exists(thisModule|PrefixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.operand) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (2089:19-2089:89): 
ThisModule.allInstances()->exists(thisModule|SuperMethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (2089:4-2089:89): 
ThisModule.allInstances()->exists(thisModule|SuperMethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (2089:4-2089:89): 
ThisModule.allInstances()->exists(thisModule|SuperMethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (2136:19-2136:89): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationExpression.allInstances()->exists(src|src.fragments->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (2136:4-2136:89): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationExpression.allInstances()->exists(src|src.fragments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (2136:4-2136:89): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationExpression.allInstances()->exists(src|src.fragments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (268:4-268:33): 
ThisModule.allInstances()->exists(thisModule|ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then let _problem_2 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (295:4-295:33): 
ThisModule.allInstances()->exists(thisModule|AnonymousClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let originalTypeAccess2 = src.refImmediateComposite().type in
	let tgt3 = oclUndefined(OclVoid) in
	let _problem_4 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_4)
	then true
	else false
	endif) or (if Archive.allInstances()->includes(_problem_4)
	then true
	else false
	endif)) or (if LabeledStatement.allInstances()->includes(_problem_4)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_4)
	then true
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (341:3-341:32): 
ThisModule.allInstances()->exists(thisModule|InterfaceDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then let _problem_2 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (365:4-365:33): 
ThisModule.allInstances()->exists(thisModule|EnumDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let _problem_2 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (420:4-420:33): 
ThisModule.allInstances()->exists(thisModule|AnnotationTypeDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let _problem_2 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (499:4-503:10): 
ThisModule.allInstances()->exists(thisModule|(ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let type2 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then let type3 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif
	else false
	endif)) or (InterfaceDeclaration.allInstances()->exists(src|let javaAttributes4 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if not (src.typeParameters.isEmpty())
	then let type5 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (524:4-524:33): 
ThisModule.allInstances()->exists(thisModule|ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let type2 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then let _problem_3 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_3)
	then true
	else false
	endif) or (if Archive.allInstances()->includes(_problem_3)
	then true
	else false
	endif)) or (if LabeledStatement.allInstances()->includes(_problem_3)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_3)
	then true
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (552:3-552:32): 
ThisModule.allInstances()->exists(thisModule|InterfaceDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if not (src.typeParameters.isEmpty())
	then let _problem_2 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (582:4-590:10): 
ThisModule.allInstances()->exists(thisModule|ParameterizedType.allInstances()->exists(src|not (if src.type.type->oclIsKindOf(UnresolvedTypeDeclaration)
	then oclUndefined(OclVoid)
	else if src.type.type.typeParameters(thisModule).isEmpty()
	then oclUndefined(OclVoid)
	else src.type->getType()
	endif
	endif.isUndefined())))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (585:10-585:38): 
ThisModule.allInstances()->exists(thisModule|ParameterizedType.allInstances()->exists(src|if src.type.type->oclIsKindOf(UnresolvedTypeDeclaration)
	then false
	else if not (src.type.type.isUndefined())
	then not (ClassDeclaration.allInstances()->includes(src.type.type))
	else false
	endif
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (617:4-617:47): 
ThisModule.allInstances()->exists(thisModule|((((ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let javaExtends2 = e in
	let _problem_3 = javaExtends2.refImmediateComposite() in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_3)
	then let src4 = _problem_3.oclAsType(AbstractMethodDeclaration) in
	src4.typeParameters.isEmpty()
	else false
	endif
	endif)
	else false
	endif)) or (InterfaceDeclaration.allInstances()->exists(src|let javaAttributes5 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let javaExtends6 = e in
	let _problem_7 = javaExtends6.refImmediateComposite() in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_7)
	then let src8 = _problem_7.oclAsType(AbstractMethodDeclaration) in
	src8.typeParameters.isEmpty()
	else false
	endif
	endif)
	else false
	endif))) or (EnumDeclaration.allInstances()->exists(src|let javaAttributes9 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let javaExtends10 = e in
	let _problem_11 = javaExtends10.refImmediateComposite() in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_11)
	then let src12 = _problem_11.oclAsType(AbstractMethodDeclaration) in
	src12.typeParameters.isEmpty()
	else false
	endif
	endif)))) or (AnnotationTypeDeclaration.allInstances()->exists(src|let javaAttributes13 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let javaExtends14 = e in
	let _problem_15 = javaExtends14.refImmediateComposite() in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_15)
	then let src16 = _problem_15.oclAsType(AbstractMethodDeclaration) in
	src16.typeParameters.isEmpty()
	else false
	endif
	endif)))) or (ClassDeclaration.allInstances()->exists(src|let javaAttributes17 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then if src.superClass.isUndefined()
	then false
	else let javaExtends18 = src.superClass in
	let _problem_19 = javaExtends18.refImmediateComposite() in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_19)
	then let src20 = _problem_19.oclAsType(AbstractMethodDeclaration) in
	src20.typeParameters.isEmpty()
	else false
	endif
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (625:3-625:21): 
ThisModule.allInstances()->exists(thisModule|((ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let type2 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then let type3 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let targetFrom4 = type3 in
	let sourceTo5 = e in
	not (targetFrom4.isUndefined())
	endif)
	else false
	endif
	else false
	endif)) or (InterfaceDeclaration.allInstances()->exists(src|let javaAttributes6 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if not (src.typeParameters.isEmpty())
	then let type7 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let targetFrom8 = type7 in
	let sourceTo9 = e in
	not (targetFrom8.isUndefined())
	endif)
	else false
	endif
	else false
	endif))) or (ClassDeclaration.allInstances()->exists(src|let javaAttributes10 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let type11 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then if src.superClass.isUndefined()
	then false
	else let targetFrom12 = type11 in
	let sourceTo13 = src.superClass in
	not (targetFrom12.isUndefined())
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (903:14-903:28): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (906:46-906:60): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.returnType(thisModule).isUndefined()
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (910:4-910:35): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then src.parameters->select(i1|not (i1.isUndefined()))->exists(_problem_|if SingleVariableDeclaration.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(SingleVariableDeclaration) in
	src2.methodDeclaration.isUndefined()
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (919:12-919:42): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (922:48-922:78): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (965:13-965:43): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (968:49-968:79): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (986:5-990:10): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (998:13-998:27): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	else false
	endif))

#########################################

third-party/largeprojects/modisco/java2kdm/javaToKdm.atl
anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1001:47-1001:61): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.returnType(thisModule).isUndefined()
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1005:4-1005:35): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then src.parameters->select(i1|not (i1.isUndefined()))->exists(_problem_|if SingleVariableDeclaration.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(SingleVariableDeclaration) in
	src2.methodDeclaration.isUndefined()
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.OperationNotFoundImpl (1030:9-1030:77): 
ThisModule.allInstances()->exists(thisModule|Comment.allInstances()->exists(src|if ((not (src.refImmediateComposite().oclIsTypeOf(AnonymousClassDeclaration))) and (not (src.refImmediateComposite().oclIsTypeOf(ImportDeclaration)))) and (not ((src.refImmediateComposite().oclIsKindOf(Expression)) and (thisModule->filterExpression(src.refImmediateComposite())->isEmpty())))
	then not (thisModule->filterExpression(src.refImmediateComposite()).isUndefined())
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (1046:3-1046:14): 
ThisModule.allInstances()->exists(thisModule|(AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else let src1 = src in
	let redefined2 = src.redefinedMethodDeclaration(thisModule) in
	not (src1.isUndefined())
	endif
	endif
	else false
	endif)) or (AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else let src3 = src in
	let redefined4 = src.redefinedMethodDeclaration(thisModule) in
	not (src3.isUndefined())
	endif
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (1047:4-1047:19): 
ThisModule.allInstances()->exists(thisModule|(AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else let src1 = src in
	let redefined2 = src.redefinedMethodDeclaration(thisModule) in
	not (redefined2.isUndefined())
	endif
	endif
	else false
	endif)) or (AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else let src3 = src in
	let redefined4 = src.redefinedMethodDeclaration(thisModule) in
	not (redefined4.isUndefined())
	endif
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (106:5-106:85): 
ThisModule.allInstances()->exists(thisModule|Model.allInstances()->exists(src|src.orphanTypes->select(e|not (e.oclIsKindOf(PrimitiveType)))->select(i1|not (i1.isUndefined()))->exists(_problem_|((((((((((((((((((not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(InterfaceDeclaration) in
	src2.typeParameters.isEmpty()
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(InterfaceDeclaration) in
	not (src3.typeParameters.isEmpty())
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(ClassDeclaration) in
	not (src4.typeParameters.isEmpty())
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_)
	then let src5 = _problem_.oclAsType(ClassDeclaration) in
	src5.typeParameters.isEmpty()
	else false
	endif))) and (not (if EnumDeclaration.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (1095:5-1099:10): 
ThisModule.allInstances()->exists(thisModule|(AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.returnType(thisModule).isUndefined()
	then false
	else let src1 = src.returnType(thisModule) in
	not (if src1.originalCompilationUnit.isUndefined()
	then src1.originalClassFile
	else src1.originalCompilationUnit
	endif.isUndefined())
	endif
	endif
	else false
	endif)) or (AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.returnType(thisModule).isUndefined()
	then false
	else let src2 = src.returnType(thisModule) in
	not (if src2.originalCompilationUnit.isUndefined()
	then src2.originalClassFile
	else src2.originalCompilationUnit
	endif.isUndefined())
	endif
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (1124:5-1128:10): 
ThisModule.allInstances()->exists(thisModule|(AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then src.thrownExceptions->exists(e|let src1 = e in
	not (if src1.originalCompilationUnit.isUndefined()
	then src1.originalClassFile
	else src1.originalCompilationUnit
	endif.isUndefined()))
	else false
	endif)) or (AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then src.thrownExceptions->exists(e|let src2 = e in
	not (if src2.originalCompilationUnit.isUndefined()
	then src2.originalClassFile
	else src2.originalCompilationUnit
	endif.isUndefined()))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1176:4-1176:63): 
ThisModule.allInstances()->exists(thisModule|AssertStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1176:4-1176:63): 
ThisModule.allInstances()->exists(thisModule|AssertStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1177:4-1177:100): 
ThisModule.allInstances()->exists(thisModule|AssertStatement.allInstances()->exists(src|if src.message.isUndefined()
	then Sequence {  }
	else Sequence { src.message }
	endif->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1177:4-1177:100): 
ThisModule.allInstances()->exists(thisModule|AssertStatement.allInstances()->exists(src|if src.message.isUndefined()
	then Sequence {  }
	else Sequence { src.message }
	endif->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1209:4-1209:20): 
ThisModule.allInstances()->exists(thisModule|((((ConstructorInvocation.allInstances()->exists(src|if src.method.isUndefined()
	then false
	else if src.method.typeParameters.isEmpty()
	then let src1 = src in
	let _problem_2 = src1.method in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_2)
	then let src3 = _problem_2.oclAsType(AbstractMethodDeclaration) in
	not (src3.typeParameters.isEmpty())
	else false
	endif
	else false
	endif
	endif)) or (SuperConstructorInvocation.allInstances()->exists(src|if src.method.isUndefined()
	then false
	else if src.method.typeParameters.isEmpty()
	then let src4 = src in
	let _problem_5 = src4.method in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_5)
	then let src6 = _problem_5.oclAsType(AbstractMethodDeclaration) in
	not (src6.typeParameters.isEmpty())
	else false
	endif
	else false
	endif
	endif))) or (ClassInstanceCreation.allInstances()->exists(src|if src.method.isUndefined()
	then false
	else let src7 = src in
	let _problem_8 = src7.method in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_8)
	then let src9 = _problem_8.oclAsType(AbstractMethodDeclaration) in
	not (src9.typeParameters.isEmpty())
	else false
	endif
	endif))) or (MethodInvocation.allInstances()->exists(src|if src.method.isUndefined()
	then false
	else if src.method.typeParameters.isEmpty()
	then let src10 = src in
	let _problem_11 = src10.method in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_11)
	then let src12 = _problem_11.oclAsType(AbstractMethodDeclaration) in
	not (src12.typeParameters.isEmpty())
	else false
	endif
	else false
	endif
	endif))) or (SuperMethodInvocation.allInstances()->exists(src|if src.method.isUndefined()
	then false
	else if src.method.typeParameters.isEmpty()
	then let src13 = src in
	let _problem_14 = src13.method in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_14)
	then let src15 = _problem_14.oclAsType(AbstractMethodDeclaration) in
	not (src15.typeParameters.isEmpty())
	else false
	endif
	else false
	endif
	endif)))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1218:10-1218:19): 
ThisModule.allInstances()->exists(thisModule|(BreakStatement.allInstances()->exists(src|if src.label.isUndefined()
	then false
	else let src1 = src in
	not (BreakStatement.allInstances()->includes(src1))
	endif)) or (ContinueStatement.allInstances()->exists(src|if src.label.isUndefined()
	then false
	else let src2 = src in
	not (BreakStatement.allInstances()->includes(src2))
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1218:4-1218:19): 
ThisModule.allInstances()->exists(thisModule|(BreakStatement.allInstances()->exists(src|if src.label.isUndefined()
	then false
	else let src1 = src in
	let _problem_2 = src1.label(thisModule) in
	if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif
	endif)) or (ContinueStatement.allInstances()->exists(src|if src.label.isUndefined()
	then false
	else let src3 = src in
	let _problem_4 = src3.label(thisModule) in
	if LabeledStatement.allInstances()->includes(_problem_4)
	then true
	else false
	endif
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1254:4-1254:109): 
ThisModule.allInstances()->exists(thisModule|SingleVariableDeclaration.allInstances()->exists(src|if src.methodDeclaration.isUndefined()
	then if src.initializer.isUndefined()
	then Sequence {  }
	else Sequence { src.initializer }
	endif->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1254:4-1254:109): 
ThisModule.allInstances()->exists(thisModule|SingleVariableDeclaration.allInstances()->exists(src|if src.methodDeclaration.isUndefined()
	then if src.initializer.isUndefined()
	then Sequence {  }
	else Sequence { src.initializer }
	endif->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif) or (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)) or (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)) or (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif)) or (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1271:4-1271:32): 
ThisModule.allInstances()->exists(thisModule|ConstructorInvocation.allInstances()->exists(src|src.arguments->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1271:4-1271:32): 
ThisModule.allInstances()->exists(thisModule|ConstructorInvocation.allInstances()->exists(src|src.arguments->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1293:4-1293:63): 
ThisModule.allInstances()->exists(thisModule|DoStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1293:4-1293:63): 
ThisModule.allInstances()->exists(thisModule|DoStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1315:4-1315:63): 
ThisModule.allInstances()->exists(thisModule|EnhancedForStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1315:4-1315:63): 
ThisModule.allInstances()->exists(thisModule|EnhancedForStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1328:4-1328:63): 
ThisModule.allInstances()->exists(thisModule|ExpressionStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1328:4-1328:63): 
ThisModule.allInstances()->exists(thisModule|ExpressionStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1339:4-1339:63): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1339:4-1339:63): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1340:4-1340:35): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|src.initializers->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1340:4-1340:35): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|src.initializers->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1341:4-1341:31): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|src.updaters->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1341:4-1341:31): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|src.updaters->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1353:4-1353:63): 
ThisModule.allInstances()->exists(thisModule|IfStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1353:4-1353:63): 
ThisModule.allInstances()->exists(thisModule|IfStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1377:4-1377:63): 
ThisModule.allInstances()->exists(thisModule|ReturnStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1377:4-1377:63): 
ThisModule.allInstances()->exists(thisModule|ReturnStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1395:19-1395:89): 
ThisModule.allInstances()->exists(thisModule|SuperConstructorInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1395:4-1395:89): 
ThisModule.allInstances()->exists(thisModule|SuperConstructorInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1395:4-1395:89): 
ThisModule.allInstances()->exists(thisModule|SuperConstructorInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1396:4-1396:63): 
ThisModule.allInstances()->exists(thisModule|SuperConstructorInvocation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1396:4-1396:63): 
ThisModule.allInstances()->exists(thisModule|SuperConstructorInvocation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1407:4-1407:63): 
ThisModule.allInstances()->exists(thisModule|SwitchCase.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1407:4-1407:63): 
ThisModule.allInstances()->exists(thisModule|SwitchCase.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1418:4-1418:63): 
ThisModule.allInstances()->exists(thisModule|SwitchStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1418:4-1418:63): 
ThisModule.allInstances()->exists(thisModule|SwitchStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1430:4-1430:63): 
ThisModule.allInstances()->exists(thisModule|SynchronizedStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1430:4-1430:63): 
ThisModule.allInstances()->exists(thisModule|SynchronizedStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1442:4-1442:63): 
ThisModule.allInstances()->exists(thisModule|ThrowStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1442:4-1442:63): 
ThisModule.allInstances()->exists(thisModule|ThrowStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1480:4-1481:52): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationStatement.allInstances()->exists(src|src.fragments->select(fragment|fragment.initializer.oclIsTypeOf(ClassInstanceCreation))->collect(fragment|fragment.initializer)->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1480:4-1481:52): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationStatement.allInstances()->exists(src|src.fragments->select(fragment|fragment.initializer.oclIsTypeOf(ClassInstanceCreation))->collect(fragment|fragment.initializer)->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1503:11-1503:47): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationFragment.allInstances()->exists(src|if not (src.variablesContainer.oclIsKindOf(FieldDeclaration))
	then if src.refImmediateComposite().oclIsTypeOf(Model)
	then false
	else if not (src.refImmediateComposite().isUndefined())
	then not (FieldDeclaration.allInstances()->includes(src.refImmediateComposite()))
	else false
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1506:8-1506:44): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationFragment.allInstances()->exists(src|if not (src.variablesContainer.oclIsKindOf(FieldDeclaration))
	then if src.refImmediateComposite().oclIsTypeOf(Model)
	then false
	else if src.refImmediateComposite().modifier(thisModule).isUndefined()
	then false
	else if not (src.refImmediateComposite().isUndefined())
	then not (FieldDeclaration.allInstances()->includes(src.refImmediateComposite()))
	else false
	endif
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1527:4-1536:10): 
ThisModule.allInstances()->exists(thisModule|(VariableDeclarationFragment.allInstances()->exists(src|if not (src.variablesContainer.oclIsKindOf(FieldDeclaration))
	then if src.initializer.isUndefined()
	then false
	else let src1 = src in
	let value2 = src.initializer in
	let _problem_3 = if value2.oclIsTypeOf(SingleVariableAccess)
	then value2.variable(thisModule)
	else if value2.oclIsTypeOf(UnresolvedItemAccess)
	then thisModule->CreateDatatype(value2)
	else value2
	endif
	endif in
	(not (_problem_3.isUndefined())) and (((((((((((((((((((((((((((((((not (if EnumConstantDeclaration.allInstances()->includes(_problem_3)
	then true
	else false
	endif)) and (not (if SingleVariableDeclaration.allInstances()->includes(_problem_3)
	then let src4 = _problem_3.oclAsType(SingleVariableDeclaration) in
	if src4.methodDeclaration.isUndefined()
	then false
	else true
	endif
	else false
	endif))) and (not (if SingleVariableDeclaration.allInstances()->includes(_problem_3)
	then let src5 = _problem_3.oclAsType(SingleVariableDeclaration) in
	src5.methodDeclaration.isUndefined()
	else false
	endif))) and (not (if VariableDeclarationFragment.allInstances()->includes(_problem_3)
	then let src6 = _problem_3.oclAsType(VariableDeclarationFragment) in
	src6.variablesContainer.oclIsKindOf(FieldDeclaration)
	else false
	endif))) and (not (if VariableDeclarationFragment.allInstances()->includes(_problem_3)
	then let src7 = _problem_3.oclAsType(VariableDeclarationFragment) in
	not (src7.variablesContainer.oclIsKindOf(FieldDeclaration))
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_3)
	then let src8 = _problem_3.oclAsType(Annotation) in
	not (src8.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_3)
	then let src9 = _problem_3.oclAsType(ArrayInitializer) in
	not (src9.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_3)
	then let src10 = _problem_3.oclAsType(StringLiteral) in
	not (src10.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif)))
	endif
	else false
	endif)) or (VariableDeclarationFragment.allInstances()->exists(src|if src.variablesContainer.oclIsKindOf(FieldDeclaration)
	then if src.initializer.isUndefined()
	then false
	else let src11 = src in
	let value12 = src.initializer in
	let _problem_13 = if value12.oclIsTypeOf(SingleVariableAccess)
	then value12.variable(thisModule)
	else if value12.oclIsTypeOf(UnresolvedItemAccess)
	then thisModule->CreateDatatype(value12)
	else value12
	endif
	endif in
	(not (_problem_13.isUndefined())) and (((((((((((((((((((((((((((((((not (if EnumConstantDeclaration.allInstances()->includes(_problem_13)
	then true
	else false
	endif)) and (not (if SingleVariableDeclaration.allInstances()->includes(_problem_13)
	then let src14 = _problem_13.oclAsType(SingleVariableDeclaration) in
	if src14.methodDeclaration.isUndefined()
	then false
	else true
	endif
	else false
	endif))) and (not (if SingleVariableDeclaration.allInstances()->includes(_problem_13)
	then let src15 = _problem_13.oclAsType(SingleVariableDeclaration) in
	src15.methodDeclaration.isUndefined()
	else false
	endif))) and (not (if VariableDeclarationFragment.allInstances()->includes(_problem_13)
	then let src16 = _problem_13.oclAsType(VariableDeclarationFragment) in
	src16.variablesContainer.oclIsKindOf(FieldDeclaration)
	else false
	endif))) and (not (if VariableDeclarationFragment.allInstances()->includes(_problem_13)
	then let src17 = _problem_13.oclAsType(VariableDeclarationFragment) in
	not (src17.variablesContainer.oclIsKindOf(FieldDeclaration))
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_13)
	then let src18 = _problem_13.oclAsType(Annotation) in
	not (src18.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_13)
	then let src19 = _problem_13.oclAsType(ArrayInitializer) in
	not (src19.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_13)
	then let src20 = _problem_13.oclAsType(StringLiteral) in
	not (src20.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif)))
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1527:4-1536:10): 
ThisModule.allInstances()->exists(thisModule|(VariableDeclarationFragment.allInstances()->exists(src|if not (src.variablesContainer.oclIsKindOf(FieldDeclaration))
	then if src.initializer.isUndefined()
	then false
	else let src1 = src in
	let value2 = src.initializer in
	let _problem_3 = if value2.oclIsTypeOf(SingleVariableAccess)
	then value2.variable(thisModule)
	else if value2.oclIsTypeOf(UnresolvedItemAccess)
	then thisModule->CreateDatatype(value2)
	else value2
	endif
	endif in
	if Annotation.allInstances()->includes(_problem_3)
	then let src4 = _problem_3.oclAsType(Annotation) in
	not (src4.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif
	endif
	else false
	endif)) or (VariableDeclarationFragment.allInstances()->exists(src|if src.variablesContainer.oclIsKindOf(FieldDeclaration)
	then if src.initializer.isUndefined()
	then false
	else let src5 = src in
	let value6 = src.initializer in
	let _problem_7 = if value6.oclIsTypeOf(SingleVariableAccess)
	then value6.variable(thisModule)
	else if value6.oclIsTypeOf(UnresolvedItemAccess)
	then thisModule->CreateDatatype(value6)
	else value6
	endif
	endif in
	if Annotation.allInstances()->includes(_problem_7)
	then let src8 = _problem_7.oclAsType(Annotation) in
	not (src8.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1586:4-1586:63): 
ThisModule.allInstances()->exists(thisModule|WhileStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1586:4-1586:63): 
ThisModule.allInstances()->exists(thisModule|WhileStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1655:3-1655:58): 
ThisModule.allInstances()->exists(thisModule|Annotation.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then let _problem_1 = src->filterRefImmediateCompositeForAnnotation() in
	((((if ConstructorInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif) or (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) or (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) or (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) or (if SuperConstructorInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1671:7-1671:45): 
ThisModule.allInstances()->exists(thisModule|Annotation.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then let genSelf1 = src in
	if genSelf1.refImmediateComposite().oclIsTypeOf(FieldDeclaration)
	then not (genSelf1.refImmediateComposite().isUndefined())
	else false
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1674:4-1674:42): 
ThisModule.allInstances()->exists(thisModule|Annotation.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then let genSelf1 = src in
	if genSelf1.refImmediateComposite().oclIsTypeOf(FieldDeclaration)
	then if genSelf1.refImmediateComposite().fragments(thisModule)->isEmpty()
	then false
	else not (genSelf1.refImmediateComposite().isUndefined())
	endif
	else false
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1678:4-1678:42): 
ThisModule.allInstances()->exists(thisModule|Annotation.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then let genSelf1 = src in
	if genSelf1.refImmediateComposite().oclIsTypeOf(FieldDeclaration)
	then false
	else if genSelf1.refImmediateComposite().oclIsTypeOf(VariableDeclarationStatement)
	then not (genSelf1.refImmediateComposite().isUndefined())
	else false
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1692:3-1692:38): 
ThisModule.allInstances()->exists(thisModule|(ArrayCreation.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src1 = src.type in
	let _problem_2 = src1.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_2)
	then let src3 = _problem_2.oclAsType(AbstractMethodDeclaration) in
	not (src3.typeParameters.isEmpty())
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_2)
	then let src4 = _problem_2.oclAsType(AbstractMethodDeclaration) in
	src4.typeParameters.isEmpty()
	else false
	endif)
	endif)) or (ClassInstanceCreation.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src5 = src.type in
	let _problem_6 = src5.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_6)
	then let src7 = _problem_6.oclAsType(AbstractMethodDeclaration) in
	not (src7.typeParameters.isEmpty())
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_6)
	then let src8 = _problem_6.oclAsType(AbstractMethodDeclaration) in
	src8.typeParameters.isEmpty()
	else false
	endif)
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (170:4-174:10): 
ThisModule.allInstances()->exists(thisModule|(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((Initializer.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined()))) or (ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (InterfaceDeclaration.allInstances()->exists(src|let javaAttributes2 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (EnumDeclaration.allInstances()->exists(src|let javaAttributes3 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (AnnotationTypeDeclaration.allInstances()->exists(src|let javaAttributes4 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (AnnotationTypeMemberDeclaration.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (FieldDeclaration.allInstances()->exists(src|if src.fragments->isEmpty()
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (EnumConstantDeclaration.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (SingleVariableDeclaration.allInstances()->exists(src|if if src.methodDeclaration.isUndefined()
	then false
	else true
	endif
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (SingleVariableDeclaration.allInstances()->exists(src|if src.methodDeclaration.isUndefined()
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (VariableDeclarationFragment.allInstances()->exists(src|if not (src.variablesContainer.oclIsKindOf(FieldDeclaration))
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (VariableDeclarationFragment.allInstances()->exists(src|if src.variablesContainer.oclIsKindOf(FieldDeclaration)
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (AnonymousClassDeclaration.allInstances()->exists(src|let javaAttributes5 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let originalTypeAccess6 = src.refImmediateComposite().type in
	let tgt7 = oclUndefined(OclVoid) in
	not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (Block.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (AssertStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (BreakStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (CatchClause.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ConstructorInvocation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ContinueStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (DoStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (EmptyStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (EnhancedForStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ExpressionStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ForStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (IfStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (LabeledStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ReturnStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (SuperConstructorInvocation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (SwitchCase.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (SwitchStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (SynchronizedStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ThrowStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (TypeDeclarationStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (TryStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (VariableDeclarationStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (WhileStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ArrayAccess.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ArrayCreation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ArrayInitializer.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (ArrayLengthAccess.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (Assignment.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (BooleanLiteral.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (CastExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (CharacterLiteral.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ClassInstanceCreation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ConditionalExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (FieldAccess.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (InfixExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (InstanceofExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (MethodInvocation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (NullLiteral.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (NumberLiteral.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ParenthesizedExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (PostfixExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (PrefixExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (StringLiteral.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (SuperFieldAccess.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (SuperMethodInvocation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ThisExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (TypeLiteral.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (VariableDeclarationExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined()))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1742:3-1742:14): 
Dead code

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1764:4-1764:58): 
ThisModule.allInstances()->exists(thisModule|ArrayAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.array) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1764:4-1764:58): 
ThisModule.allInstances()->exists(thisModule|ArrayAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.array) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1774:4-1774:58): 
ThisModule.allInstances()->exists(thisModule|ArrayAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.index) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1774:4-1774:58): 
ThisModule.allInstances()->exists(thisModule|ArrayAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.index) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1786:19-1786:90): 
ThisModule.allInstances()->exists(thisModule|ArrayCreation.allInstances()->exists(src|src.dimensions->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1786:4-1786:90): 
ThisModule.allInstances()->exists(thisModule|ArrayCreation.allInstances()->exists(src|src.dimensions->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1786:4-1786:90): 
ThisModule.allInstances()->exists(thisModule|ArrayCreation.allInstances()->exists(src|src.dimensions->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1787:4-1787:64): 
ThisModule.allInstances()->exists(thisModule|ArrayCreation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.initializer) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1787:4-1787:64): 
ThisModule.allInstances()->exists(thisModule|ArrayCreation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.initializer) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1801:19-1802:65): 
ThisModule.allInstances()->exists(thisModule|ArrayInitializer.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then src.expressions->select(e|not (e.oclIsTypeOf(Annotation)))->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1801:4-1802:65): 
ThisModule.allInstances()->exists(thisModule|ArrayInitializer.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then src.expressions->select(e|not (e.oclIsTypeOf(Annotation)))->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1801:4-1802:65): 
ThisModule.allInstances()->exists(thisModule|ArrayInitializer.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then src.expressions->select(e|not (e.oclIsTypeOf(Annotation)))->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1816:4-1816:58): 
ThisModule.allInstances()->exists(thisModule|ArrayLengthAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.array) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1816:4-1816:58): 
ThisModule.allInstances()->exists(thisModule|ArrayLengthAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.array) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1836:4-1836:65): 
ThisModule.allInstances()->exists(thisModule|Assignment.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftHandSide) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1836:4-1836:65): 
ThisModule.allInstances()->exists(thisModule|Assignment.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftHandSide) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1845:4-1845:66): 
ThisModule.allInstances()->exists(thisModule|Assignment.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.rightHandSide) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1845:4-1845:66): 
ThisModule.allInstances()->exists(thisModule|Assignment.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.rightHandSide) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1876:4-1876:63): 
ThisModule.allInstances()->exists(thisModule|CastExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1876:4-1876:63): 
ThisModule.allInstances()->exists(thisModule|CastExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1885:3-1885:38): 
ThisModule.allInstances()->exists(thisModule|((((CastExpression.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src1 = src.type in
	let _problem_2 = src1.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_2)
	then let src3 = _problem_2.oclAsType(AbstractMethodDeclaration) in
	not (src3.typeParameters.isEmpty())
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_2)
	then let src4 = _problem_2.oclAsType(AbstractMethodDeclaration) in
	src4.typeParameters.isEmpty()
	else false
	endif)
	endif)) or (InstanceofExpression.allInstances()->exists(src|if src.rightOperand.isUndefined()
	then false
	else let src5 = src.rightOperand in
	let _problem_6 = src5.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_6)
	then let src7 = _problem_6.oclAsType(AbstractMethodDeclaration) in
	not (src7.typeParameters.isEmpty())
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_6)
	then let src8 = _problem_6.oclAsType(AbstractMethodDeclaration) in
	src8.typeParameters.isEmpty()
	else false
	endif)
	endif))) or (SuperFieldAccess.allInstances()->exists(src|if src.field.isUndefined()
	then false
	else let src9 = src.field in
	let _problem_10 = src9.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_10)
	then let src11 = _problem_10.oclAsType(AbstractMethodDeclaration) in
	not (src11.typeParameters.isEmpty())
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_10)
	then let src12 = _problem_10.oclAsType(AbstractMethodDeclaration) in
	src12.typeParameters.isEmpty()
	else false
	endif)
	endif))) or (ThisExpression.allInstances()->exists(src|if src.qualifier.isUndefined()
	then false
	else let src13 = src.qualifier in
	let _problem_14 = src13.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_14)
	then let src15 = _problem_14.oclAsType(AbstractMethodDeclaration) in
	not (src15.typeParameters.isEmpty())
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_14)
	then let src16 = _problem_14.oclAsType(AbstractMethodDeclaration) in
	src16.typeParameters.isEmpty()
	else false
	endif)
	endif))) or (VariableDeclarationExpression.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src17 = src.type in
	let _problem_18 = src17.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_18)
	then let src19 = _problem_18.oclAsType(AbstractMethodDeclaration) in
	not (src19.typeParameters.isEmpty())
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_18)
	then let src20 = _problem_18.oclAsType(AbstractMethodDeclaration) in
	src20.typeParameters.isEmpty()
	else false
	endif)
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1886:4-1886:18): 
ThisModule.allInstances()->exists(thisModule|((((CastExpression.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src1 = src.type in
	let _problem_2 = src1.type in
	(not (_problem_2.isUndefined())) and (((((((((((((((((((not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_2)
	then let src3 = _problem_2.oclAsType(InterfaceDeclaration) in
	src3.typeParameters.isEmpty()
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_2)
	then let src4 = _problem_2.oclAsType(InterfaceDeclaration) in
	not (src4.typeParameters.isEmpty())
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_2)
	then let src5 = _problem_2.oclAsType(ClassDeclaration) in
	not (src5.typeParameters.isEmpty())
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_2)
	then let src6 = _problem_2.oclAsType(ClassDeclaration) in
	src6.typeParameters.isEmpty()
	else false
	endif))) and (not (if EnumDeclaration.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_2)
	then true
	else false
	endif)))
	endif)) or (InstanceofExpression.allInstances()->exists(src|if src.rightOperand.isUndefined()
	then false
	else let src7 = src.rightOperand in
	let _problem_8 = src7.type in
	(not (_problem_8.isUndefined())) and (((((((((((((((((((not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_8)
	then true
	else false
	endif)) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_8)
	then let src9 = _problem_8.oclAsType(InterfaceDeclaration) in
	src9.typeParameters.isEmpty()
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_8)
	then let src10 = _problem_8.oclAsType(InterfaceDeclaration) in
	not (src10.typeParameters.isEmpty())
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_8)
	then let src11 = _problem_8.oclAsType(ClassDeclaration) in
	not (src11.typeParameters.isEmpty())
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_8)
	then let src12 = _problem_8.oclAsType(ClassDeclaration) in
	src12.typeParameters.isEmpty()
	else false
	endif))) and (not (if EnumDeclaration.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_8)
	then true
	else false
	endif)))
	endif))) or (SuperFieldAccess.allInstances()->exists(src|if src.field.isUndefined()
	then false
	else let src13 = src.field in
	let _problem_14 = src13.type in
	(not (_problem_14.isUndefined())) and (((((((((((((((((((not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_14)
	then true
	else false
	endif)) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_14)
	then let src15 = _problem_14.oclAsType(InterfaceDeclaration) in
	src15.typeParameters.isEmpty()
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_14)
	then let src16 = _problem_14.oclAsType(InterfaceDeclaration) in
	not (src16.typeParameters.isEmpty())
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_14)
	then let src17 = _problem_14.oclAsType(ClassDeclaration) in
	not (src17.typeParameters.isEmpty())
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_14)
	then let src18 = _problem_14.oclAsType(ClassDeclaration) in
	src18.typeParameters.isEmpty()
	else false
	endif))) and (not (if EnumDeclaration.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_14)
	then true
	else false
	endif)))
	endif))) or (ThisExpression.allInstances()->exists(src|if src.qualifier.isUndefined()
	then false
	else let src19 = src.qualifier in
	let _problem_20 = src19.type in
	(not (_problem_20.isUndefined())) and (((((((((((((((((((not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_20)
	then true
	else false
	endif)) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_20)
	then let src21 = _problem_20.oclAsType(InterfaceDeclaration) in
	src21.typeParameters.isEmpty()
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_20)
	then let src22 = _problem_20.oclAsType(InterfaceDeclaration) in
	not (src22.typeParameters.isEmpty())
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_20)
	then let src23 = _problem_20.oclAsType(ClassDeclaration) in
	not (src23.typeParameters.isEmpty())
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_20)
	then let src24 = _problem_20.oclAsType(ClassDeclaration) in
	src24.typeParameters.isEmpty()
	else false
	endif))) and (not (if EnumDeclaration.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_20)
	then true
	else false
	endif)))
	endif))) or (VariableDeclarationExpression.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src25 = src.type in
	let _problem_26 = src25.type in
	(not (_problem_26.isUndefined())) and (((((((((((((((((((not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_26)
	then true
	else false
	endif)) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_26)
	then let src27 = _problem_26.oclAsType(InterfaceDeclaration) in
	src27.typeParameters.isEmpty()
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_26)
	then let src28 = _problem_26.oclAsType(InterfaceDeclaration) in
	not (src28.typeParameters.isEmpty())
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_26)
	then let src29 = _problem_26.oclAsType(ClassDeclaration) in
	not (src29.typeParameters.isEmpty())
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_26)
	then let src30 = _problem_26.oclAsType(ClassDeclaration) in
	src30.typeParameters.isEmpty()
	else false
	endif))) and (not (if EnumDeclaration.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_26)
	then true
	else false
	endif)))
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1907:4-1907:63): 
ThisModule.allInstances()->exists(thisModule|ClassInstanceCreation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1907:4-1907:63): 
ThisModule.allInstances()->exists(thisModule|ClassInstanceCreation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1908:19-1908:89): 
ThisModule.allInstances()->exists(thisModule|ClassInstanceCreation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1908:4-1908:89): 
ThisModule.allInstances()->exists(thisModule|ClassInstanceCreation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1908:4-1908:89): 
ThisModule.allInstances()->exists(thisModule|ClassInstanceCreation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1924:4-1924:63): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1924:4-1924:63): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1925:4-1925:67): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.thenExpression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1925:4-1925:67): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.thenExpression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1926:4-1926:67): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.elseExpression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1926:4-1926:67): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.elseExpression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1937:4-1937:63): 
ThisModule.allInstances()->exists(thisModule|FieldAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1937:4-1937:63): 
ThisModule.allInstances()->exists(thisModule|FieldAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1957:4-1957:64): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftOperand) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1957:4-1957:64): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftOperand) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1958:4-1958:65): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.rightOperand) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1958:4-1958:65): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.rightOperand) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1959:19-1959:96): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|src.extendedOperands->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1959:4-1959:96): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|src.extendedOperands->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1959:4-1959:96): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|src.extendedOperands->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1970:4-1970:64): 
ThisModule.allInstances()->exists(thisModule|InstanceofExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftOperand) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1970:4-1970:64): 
ThisModule.allInstances()->exists(thisModule|InstanceofExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftOperand) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1982:4-1982:63): 
ThisModule.allInstances()->exists(thisModule|MethodInvocation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1982:4-1982:63): 
ThisModule.allInstances()->exists(thisModule|MethodInvocation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1983:19-1983:89): 
ThisModule.allInstances()->exists(thisModule|MethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1983:4-1983:89): 
ThisModule.allInstances()->exists(thisModule|MethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1983:4-1983:89): 
ThisModule.allInstances()->exists(thisModule|MethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (2024:4-2024:63): 
ThisModule.allInstances()->exists(thisModule|ParenthesizedExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (2024:4-2024:63): 
ThisModule.allInstances()->exists(thisModule|ParenthesizedExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (2035:4-2035:60): 
ThisModule.allInstances()->exists(thisModule|PostfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.operand) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (2035:4-2035:60): 
ThisModule.allInstances()->exists(thisModule|PostfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.operand) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (2046:4-2046:60): 
ThisModule.allInstances()->exists(thisModule|PrefixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.operand) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (2046:4-2046:60): 
ThisModule.allInstances()->exists(thisModule|PrefixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.operand) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (2089:19-2089:89): 
ThisModule.allInstances()->exists(thisModule|SuperMethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (2089:4-2089:89): 
ThisModule.allInstances()->exists(thisModule|SuperMethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (2089:4-2089:89): 
ThisModule.allInstances()->exists(thisModule|SuperMethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (2136:19-2136:89): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationExpression.allInstances()->exists(src|src.fragments->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (2136:4-2136:89): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationExpression.allInstances()->exists(src|src.fragments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (2136:4-2136:89): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationExpression.allInstances()->exists(src|src.fragments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (268:4-268:33): 
ThisModule.allInstances()->exists(thisModule|ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then let _problem_2 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (295:4-295:33): 
ThisModule.allInstances()->exists(thisModule|AnonymousClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let originalTypeAccess2 = src.refImmediateComposite().type in
	let tgt3 = oclUndefined(OclVoid) in
	let _problem_4 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_4)
	then true
	else false
	endif) or (if LabeledStatement.allInstances()->includes(_problem_4)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_4)
	then true
	else false
	endif)) or (if Archive.allInstances()->includes(_problem_4)
	then true
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (341:3-341:32): 
ThisModule.allInstances()->exists(thisModule|InterfaceDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then let _problem_2 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (365:4-365:33): 
ThisModule.allInstances()->exists(thisModule|EnumDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let _problem_2 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (420:4-420:33): 
ThisModule.allInstances()->exists(thisModule|AnnotationTypeDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let _problem_2 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (499:4-503:10): 
ThisModule.allInstances()->exists(thisModule|(ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let type2 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then let type3 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif
	else false
	endif)) or (InterfaceDeclaration.allInstances()->exists(src|let javaAttributes4 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if not (src.typeParameters.isEmpty())
	then let type5 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (524:4-524:33): 
ThisModule.allInstances()->exists(thisModule|ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let type2 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then let _problem_3 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_3)
	then true
	else false
	endif) or (if LabeledStatement.allInstances()->includes(_problem_3)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_3)
	then true
	else false
	endif)) or (if Archive.allInstances()->includes(_problem_3)
	then true
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (552:3-552:32): 
ThisModule.allInstances()->exists(thisModule|InterfaceDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if not (src.typeParameters.isEmpty())
	then let _problem_2 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (582:4-590:10): 
ThisModule.allInstances()->exists(thisModule|ParameterizedType.allInstances()->exists(src|not (if src.type.type->oclIsKindOf(UnresolvedTypeDeclaration)
	then oclUndefined(OclVoid)
	else if src.type.type.typeParameters(thisModule).isEmpty()
	then oclUndefined(OclVoid)
	else src.type->getType()
	endif
	endif.isUndefined())))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (585:10-585:38): 
ThisModule.allInstances()->exists(thisModule|ParameterizedType.allInstances()->exists(src|if src.type.type->oclIsKindOf(UnresolvedTypeDeclaration)
	then false
	else if not (src.type.type.isUndefined())
	then not (ClassDeclaration.allInstances()->includes(src.type.type))
	else false
	endif
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (617:4-617:47): 
ThisModule.allInstances()->exists(thisModule|((((ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let javaExtends2 = e in
	let _problem_3 = javaExtends2.refImmediateComposite() in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_3)
	then let src4 = _problem_3.oclAsType(AbstractMethodDeclaration) in
	src4.typeParameters.isEmpty()
	else false
	endif
	endif)
	else false
	endif)) or (InterfaceDeclaration.allInstances()->exists(src|let javaAttributes5 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let javaExtends6 = e in
	let _problem_7 = javaExtends6.refImmediateComposite() in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_7)
	then let src8 = _problem_7.oclAsType(AbstractMethodDeclaration) in
	src8.typeParameters.isEmpty()
	else false
	endif
	endif)
	else false
	endif))) or (EnumDeclaration.allInstances()->exists(src|let javaAttributes9 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let javaExtends10 = e in
	let _problem_11 = javaExtends10.refImmediateComposite() in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_11)
	then let src12 = _problem_11.oclAsType(AbstractMethodDeclaration) in
	src12.typeParameters.isEmpty()
	else false
	endif
	endif)))) or (AnnotationTypeDeclaration.allInstances()->exists(src|let javaAttributes13 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let javaExtends14 = e in
	let _problem_15 = javaExtends14.refImmediateComposite() in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_15)
	then let src16 = _problem_15.oclAsType(AbstractMethodDeclaration) in
	src16.typeParameters.isEmpty()
	else false
	endif
	endif)))) or (ClassDeclaration.allInstances()->exists(src|let javaAttributes17 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then if src.superClass.isUndefined()
	then false
	else let javaExtends18 = src.superClass in
	let _problem_19 = javaExtends18.refImmediateComposite() in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_19)
	then let src20 = _problem_19.oclAsType(AbstractMethodDeclaration) in
	src20.typeParameters.isEmpty()
	else false
	endif
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (625:3-625:21): 
ThisModule.allInstances()->exists(thisModule|((ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let type2 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then let type3 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let targetFrom4 = type3 in
	let sourceTo5 = e in
	not (targetFrom4.isUndefined())
	endif)
	else false
	endif
	else false
	endif)) or (InterfaceDeclaration.allInstances()->exists(src|let javaAttributes6 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if not (src.typeParameters.isEmpty())
	then let type7 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let targetFrom8 = type7 in
	let sourceTo9 = e in
	not (targetFrom8.isUndefined())
	endif)
	else false
	endif
	else false
	endif))) or (ClassDeclaration.allInstances()->exists(src|let javaAttributes10 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let type11 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then if src.superClass.isUndefined()
	then false
	else let targetFrom12 = type11 in
	let sourceTo13 = src.superClass in
	not (targetFrom12.isUndefined())
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (903:14-903:28): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (906:46-906:60): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.returnType(thisModule).isUndefined()
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (910:4-910:35): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then src.parameters->select(i1|not (i1.isUndefined()))->exists(_problem_|if SingleVariableDeclaration.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(SingleVariableDeclaration) in
	src2.methodDeclaration.isUndefined()
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (919:12-919:42): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (922:48-922:78): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (965:13-965:43): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (968:49-968:79): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (986:5-990:10): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (998:13-998:27): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	else false
	endif))

#########################################

third-party/largeprojects/modisco/java2kdm/javaToKdm.atl
anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1001:47-1001:61): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.returnType(thisModule).isUndefined()
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1005:4-1005:35): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then src.parameters->select(i1|not (i1.isUndefined()))->exists(_problem_|if SingleVariableDeclaration.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(SingleVariableDeclaration) in
	src2.methodDeclaration.isUndefined()
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.OperationNotFoundImpl (1030:9-1030:77): 
ThisModule.allInstances()->exists(thisModule|Comment.allInstances()->exists(src|if ((not (src.refImmediateComposite().oclIsTypeOf(AnonymousClassDeclaration))) and (not (src.refImmediateComposite().oclIsTypeOf(ImportDeclaration)))) and (not ((src.refImmediateComposite().oclIsKindOf(Expression)) and (thisModule->filterExpression(src.refImmediateComposite())->isEmpty())))
	then not (thisModule->filterExpression(src.refImmediateComposite()).isUndefined())
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (1046:3-1046:14): 
ThisModule.allInstances()->exists(thisModule|(AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else let src1 = src in
	let redefined2 = src.redefinedMethodDeclaration(thisModule) in
	not (src1.isUndefined())
	endif
	endif
	else false
	endif)) or (AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else let src3 = src in
	let redefined4 = src.redefinedMethodDeclaration(thisModule) in
	not (src3.isUndefined())
	endif
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (1047:4-1047:19): 
ThisModule.allInstances()->exists(thisModule|(AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else let src1 = src in
	let redefined2 = src.redefinedMethodDeclaration(thisModule) in
	not (redefined2.isUndefined())
	endif
	endif
	else false
	endif)) or (AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else let src3 = src in
	let redefined4 = src.redefinedMethodDeclaration(thisModule) in
	not (redefined4.isUndefined())
	endif
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (106:5-106:85): 
ThisModule.allInstances()->exists(thisModule|Model.allInstances()->exists(src|src.orphanTypes->select(e|not (e.oclIsKindOf(PrimitiveType)))->select(i1|not (i1.isUndefined()))->exists(_problem_|((((((((((((((((((not (if ClassDeclaration.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(ClassDeclaration) in
	src2.typeParameters.isEmpty()
	else false
	endif)) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(InterfaceDeclaration) in
	not (src3.typeParameters.isEmpty())
	else false
	endif))) and (not (if EnumDeclaration.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(ClassDeclaration) in
	not (src4.typeParameters.isEmpty())
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_)
	then let src5 = _problem_.oclAsType(InterfaceDeclaration) in
	src5.typeParameters.isEmpty()
	else false
	endif))) and (not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (1095:5-1099:10): 
ThisModule.allInstances()->exists(thisModule|(AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.returnType(thisModule).isUndefined()
	then false
	else let src1 = src.returnType(thisModule) in
	not (if src1.originalCompilationUnit.isUndefined()
	then src1.originalClassFile
	else src1.originalCompilationUnit
	endif.isUndefined())
	endif
	endif
	else false
	endif)) or (AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.returnType(thisModule).isUndefined()
	then false
	else let src2 = src.returnType(thisModule) in
	not (if src2.originalCompilationUnit.isUndefined()
	then src2.originalClassFile
	else src2.originalCompilationUnit
	endif.isUndefined())
	endif
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (1124:5-1128:10): 
ThisModule.allInstances()->exists(thisModule|(AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then src.thrownExceptions->exists(e|let src1 = e in
	not (if src1.originalCompilationUnit.isUndefined()
	then src1.originalClassFile
	else src1.originalCompilationUnit
	endif.isUndefined()))
	else false
	endif)) or (AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then src.thrownExceptions->exists(e|let src2 = e in
	not (if src2.originalCompilationUnit.isUndefined()
	then src2.originalClassFile
	else src2.originalCompilationUnit
	endif.isUndefined()))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1176:4-1176:63): 
ThisModule.allInstances()->exists(thisModule|AssertStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1176:4-1176:63): 
ThisModule.allInstances()->exists(thisModule|AssertStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1177:4-1177:100): 
ThisModule.allInstances()->exists(thisModule|AssertStatement.allInstances()->exists(src|if src.message.isUndefined()
	then Sequence {  }
	else Sequence { src.message }
	endif->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1177:4-1177:100): 
ThisModule.allInstances()->exists(thisModule|AssertStatement.allInstances()->exists(src|if src.message.isUndefined()
	then Sequence {  }
	else Sequence { src.message }
	endif->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1209:4-1209:20): 
ThisModule.allInstances()->exists(thisModule|((((ConstructorInvocation.allInstances()->exists(src|if src.method.isUndefined()
	then false
	else if src.method.typeParameters.isEmpty()
	then let src1 = src in
	let _problem_2 = src1.method in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_2)
	then let src3 = _problem_2.oclAsType(AbstractMethodDeclaration) in
	not (src3.typeParameters.isEmpty())
	else false
	endif
	else false
	endif
	endif)) or (SuperConstructorInvocation.allInstances()->exists(src|if src.method.isUndefined()
	then false
	else if src.method.typeParameters.isEmpty()
	then let src4 = src in
	let _problem_5 = src4.method in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_5)
	then let src6 = _problem_5.oclAsType(AbstractMethodDeclaration) in
	not (src6.typeParameters.isEmpty())
	else false
	endif
	else false
	endif
	endif))) or (ClassInstanceCreation.allInstances()->exists(src|if src.method.isUndefined()
	then false
	else let src7 = src in
	let _problem_8 = src7.method in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_8)
	then let src9 = _problem_8.oclAsType(AbstractMethodDeclaration) in
	not (src9.typeParameters.isEmpty())
	else false
	endif
	endif))) or (MethodInvocation.allInstances()->exists(src|if src.method.isUndefined()
	then false
	else if src.method.typeParameters.isEmpty()
	then let src10 = src in
	let _problem_11 = src10.method in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_11)
	then let src12 = _problem_11.oclAsType(AbstractMethodDeclaration) in
	not (src12.typeParameters.isEmpty())
	else false
	endif
	else false
	endif
	endif))) or (SuperMethodInvocation.allInstances()->exists(src|if src.method.isUndefined()
	then false
	else if src.method.typeParameters.isEmpty()
	then let src13 = src in
	let _problem_14 = src13.method in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_14)
	then let src15 = _problem_14.oclAsType(AbstractMethodDeclaration) in
	not (src15.typeParameters.isEmpty())
	else false
	endif
	else false
	endif
	endif)))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1218:10-1218:19): 
ThisModule.allInstances()->exists(thisModule|(BreakStatement.allInstances()->exists(src|if src.label.isUndefined()
	then false
	else let src1 = src in
	not (BreakStatement.allInstances()->includes(src1))
	endif)) or (ContinueStatement.allInstances()->exists(src|if src.label.isUndefined()
	then false
	else let src2 = src in
	not (BreakStatement.allInstances()->includes(src2))
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1218:4-1218:19): 
ThisModule.allInstances()->exists(thisModule|(BreakStatement.allInstances()->exists(src|if src.label.isUndefined()
	then false
	else let src1 = src in
	let _problem_2 = src1.label(thisModule) in
	if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif
	endif)) or (ContinueStatement.allInstances()->exists(src|if src.label.isUndefined()
	then false
	else let src3 = src in
	let _problem_4 = src3.label(thisModule) in
	if LabeledStatement.allInstances()->includes(_problem_4)
	then true
	else false
	endif
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1254:4-1254:109): 
ThisModule.allInstances()->exists(thisModule|SingleVariableDeclaration.allInstances()->exists(src|if src.methodDeclaration.isUndefined()
	then if src.initializer.isUndefined()
	then Sequence {  }
	else Sequence { src.initializer }
	endif->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1254:4-1254:109): 
ThisModule.allInstances()->exists(thisModule|SingleVariableDeclaration.allInstances()->exists(src|if src.methodDeclaration.isUndefined()
	then if src.initializer.isUndefined()
	then Sequence {  }
	else Sequence { src.initializer }
	endif->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((if StringLiteral.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(StringLiteral) in
	not (src2.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif) or (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if Annotation.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(Annotation) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)) or (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(ArrayInitializer) in
	not (src4.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)) or (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1271:4-1271:32): 
ThisModule.allInstances()->exists(thisModule|ConstructorInvocation.allInstances()->exists(src|src.arguments->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1271:4-1271:32): 
ThisModule.allInstances()->exists(thisModule|ConstructorInvocation.allInstances()->exists(src|src.arguments->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1293:4-1293:63): 
ThisModule.allInstances()->exists(thisModule|DoStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1293:4-1293:63): 
ThisModule.allInstances()->exists(thisModule|DoStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1315:4-1315:63): 
ThisModule.allInstances()->exists(thisModule|EnhancedForStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1315:4-1315:63): 
ThisModule.allInstances()->exists(thisModule|EnhancedForStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1328:4-1328:63): 
ThisModule.allInstances()->exists(thisModule|ExpressionStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1328:4-1328:63): 
ThisModule.allInstances()->exists(thisModule|ExpressionStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1339:4-1339:63): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1339:4-1339:63): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1340:4-1340:35): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|src.initializers->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1340:4-1340:35): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|src.initializers->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1341:4-1341:31): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|src.updaters->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1341:4-1341:31): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|src.updaters->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1353:4-1353:63): 
ThisModule.allInstances()->exists(thisModule|IfStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1353:4-1353:63): 
ThisModule.allInstances()->exists(thisModule|IfStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1377:4-1377:63): 
ThisModule.allInstances()->exists(thisModule|ReturnStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1377:4-1377:63): 
ThisModule.allInstances()->exists(thisModule|ReturnStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1395:19-1395:89): 
ThisModule.allInstances()->exists(thisModule|SuperConstructorInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1395:4-1395:89): 
ThisModule.allInstances()->exists(thisModule|SuperConstructorInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1395:4-1395:89): 
ThisModule.allInstances()->exists(thisModule|SuperConstructorInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1396:4-1396:63): 
ThisModule.allInstances()->exists(thisModule|SuperConstructorInvocation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1396:4-1396:63): 
ThisModule.allInstances()->exists(thisModule|SuperConstructorInvocation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1407:4-1407:63): 
ThisModule.allInstances()->exists(thisModule|SwitchCase.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1407:4-1407:63): 
ThisModule.allInstances()->exists(thisModule|SwitchCase.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1418:4-1418:63): 
ThisModule.allInstances()->exists(thisModule|SwitchStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1418:4-1418:63): 
ThisModule.allInstances()->exists(thisModule|SwitchStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1430:4-1430:63): 
ThisModule.allInstances()->exists(thisModule|SynchronizedStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1430:4-1430:63): 
ThisModule.allInstances()->exists(thisModule|SynchronizedStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1442:4-1442:63): 
ThisModule.allInstances()->exists(thisModule|ThrowStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1442:4-1442:63): 
ThisModule.allInstances()->exists(thisModule|ThrowStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1480:4-1481:52): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationStatement.allInstances()->exists(src|src.fragments->select(fragment|fragment.initializer.oclIsTypeOf(ClassInstanceCreation))->collect(fragment|fragment.initializer)->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1480:4-1481:52): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationStatement.allInstances()->exists(src|src.fragments->select(fragment|fragment.initializer.oclIsTypeOf(ClassInstanceCreation))->collect(fragment|fragment.initializer)->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1503:11-1503:47): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationFragment.allInstances()->exists(src|if not (src.variablesContainer.oclIsKindOf(FieldDeclaration))
	then if src.refImmediateComposite().oclIsTypeOf(Model)
	then false
	else if not (src.refImmediateComposite().isUndefined())
	then not (FieldDeclaration.allInstances()->includes(src.refImmediateComposite()))
	else false
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1506:8-1506:44): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationFragment.allInstances()->exists(src|if not (src.variablesContainer.oclIsKindOf(FieldDeclaration))
	then if src.refImmediateComposite().oclIsTypeOf(Model)
	then false
	else if src.refImmediateComposite().modifier(thisModule).isUndefined()
	then false
	else if not (src.refImmediateComposite().isUndefined())
	then not (FieldDeclaration.allInstances()->includes(src.refImmediateComposite()))
	else false
	endif
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1527:4-1536:10): 
ThisModule.allInstances()->exists(thisModule|(VariableDeclarationFragment.allInstances()->exists(src|if not (src.variablesContainer.oclIsKindOf(FieldDeclaration))
	then if src.initializer.isUndefined()
	then false
	else let src1 = src in
	let value2 = src.initializer in
	let _problem_3 = if value2.oclIsTypeOf(SingleVariableAccess)
	then value2.variable(thisModule)
	else if value2.oclIsTypeOf(UnresolvedItemAccess)
	then thisModule->CreateDatatype(value2)
	else value2
	endif
	endif in
	(not (_problem_3.isUndefined())) and (((((((((((((((((((((((((((((((not (if EnumConstantDeclaration.allInstances()->includes(_problem_3)
	then true
	else false
	endif)) and (not (if SingleVariableDeclaration.allInstances()->includes(_problem_3)
	then let src4 = _problem_3.oclAsType(SingleVariableDeclaration) in
	src4.methodDeclaration.isUndefined()
	else false
	endif))) and (not (if SingleVariableDeclaration.allInstances()->includes(_problem_3)
	then let src5 = _problem_3.oclAsType(SingleVariableDeclaration) in
	if src5.methodDeclaration.isUndefined()
	then false
	else true
	endif
	else false
	endif))) and (not (if VariableDeclarationFragment.allInstances()->includes(_problem_3)
	then let src6 = _problem_3.oclAsType(VariableDeclarationFragment) in
	not (src6.variablesContainer.oclIsKindOf(FieldDeclaration))
	else false
	endif))) and (not (if VariableDeclarationFragment.allInstances()->includes(_problem_3)
	then let src7 = _problem_3.oclAsType(VariableDeclarationFragment) in
	src7.variablesContainer.oclIsKindOf(FieldDeclaration)
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_3)
	then let src8 = _problem_3.oclAsType(Annotation) in
	not (src8.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_3)
	then let src9 = _problem_3.oclAsType(ArrayInitializer) in
	not (src9.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_3)
	then let src10 = _problem_3.oclAsType(StringLiteral) in
	not (src10.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif)))
	endif
	else false
	endif)) or (VariableDeclarationFragment.allInstances()->exists(src|if src.variablesContainer.oclIsKindOf(FieldDeclaration)
	then if src.initializer.isUndefined()
	then false
	else let src11 = src in
	let value12 = src.initializer in
	let _problem_13 = if value12.oclIsTypeOf(SingleVariableAccess)
	then value12.variable(thisModule)
	else if value12.oclIsTypeOf(UnresolvedItemAccess)
	then thisModule->CreateDatatype(value12)
	else value12
	endif
	endif in
	(not (_problem_13.isUndefined())) and (((((((((((((((((((((((((((((((not (if EnumConstantDeclaration.allInstances()->includes(_problem_13)
	then true
	else false
	endif)) and (not (if SingleVariableDeclaration.allInstances()->includes(_problem_13)
	then let src14 = _problem_13.oclAsType(SingleVariableDeclaration) in
	src14.methodDeclaration.isUndefined()
	else false
	endif))) and (not (if SingleVariableDeclaration.allInstances()->includes(_problem_13)
	then let src15 = _problem_13.oclAsType(SingleVariableDeclaration) in
	if src15.methodDeclaration.isUndefined()
	then false
	else true
	endif
	else false
	endif))) and (not (if VariableDeclarationFragment.allInstances()->includes(_problem_13)
	then let src16 = _problem_13.oclAsType(VariableDeclarationFragment) in
	not (src16.variablesContainer.oclIsKindOf(FieldDeclaration))
	else false
	endif))) and (not (if VariableDeclarationFragment.allInstances()->includes(_problem_13)
	then let src17 = _problem_13.oclAsType(VariableDeclarationFragment) in
	src17.variablesContainer.oclIsKindOf(FieldDeclaration)
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_13)
	then let src18 = _problem_13.oclAsType(Annotation) in
	not (src18.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_13)
	then let src19 = _problem_13.oclAsType(ArrayInitializer) in
	not (src19.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_13)
	then let src20 = _problem_13.oclAsType(StringLiteral) in
	not (src20.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif)))
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1527:4-1536:10): 
ThisModule.allInstances()->exists(thisModule|(VariableDeclarationFragment.allInstances()->exists(src|if not (src.variablesContainer.oclIsKindOf(FieldDeclaration))
	then if src.initializer.isUndefined()
	then false
	else let src1 = src in
	let value2 = src.initializer in
	let _problem_3 = if value2.oclIsTypeOf(SingleVariableAccess)
	then value2.variable(thisModule)
	else if value2.oclIsTypeOf(UnresolvedItemAccess)
	then thisModule->CreateDatatype(value2)
	else value2
	endif
	endif in
	if Annotation.allInstances()->includes(_problem_3)
	then let src4 = _problem_3.oclAsType(Annotation) in
	not (src4.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif
	endif
	else false
	endif)) or (VariableDeclarationFragment.allInstances()->exists(src|if src.variablesContainer.oclIsKindOf(FieldDeclaration)
	then if src.initializer.isUndefined()
	then false
	else let src5 = src in
	let value6 = src.initializer in
	let _problem_7 = if value6.oclIsTypeOf(SingleVariableAccess)
	then value6.variable(thisModule)
	else if value6.oclIsTypeOf(UnresolvedItemAccess)
	then thisModule->CreateDatatype(value6)
	else value6
	endif
	endif in
	if Annotation.allInstances()->includes(_problem_7)
	then let src8 = _problem_7.oclAsType(Annotation) in
	not (src8.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1586:4-1586:63): 
ThisModule.allInstances()->exists(thisModule|WhileStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1586:4-1586:63): 
ThisModule.allInstances()->exists(thisModule|WhileStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1655:3-1655:58): 
ThisModule.allInstances()->exists(thisModule|Annotation.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then let _problem_1 = src->filterRefImmediateCompositeForAnnotation() in
	((((if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif) or (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) or (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) or (if SuperConstructorInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) or (if ConstructorInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1671:7-1671:45): 
ThisModule.allInstances()->exists(thisModule|Annotation.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then let genSelf1 = src in
	if genSelf1.refImmediateComposite().oclIsTypeOf(FieldDeclaration)
	then not (genSelf1.refImmediateComposite().isUndefined())
	else false
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1674:4-1674:42): 
ThisModule.allInstances()->exists(thisModule|Annotation.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then let genSelf1 = src in
	if genSelf1.refImmediateComposite().oclIsTypeOf(FieldDeclaration)
	then if genSelf1.refImmediateComposite().fragments(thisModule)->isEmpty()
	then false
	else not (genSelf1.refImmediateComposite().isUndefined())
	endif
	else false
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1678:4-1678:42): 
ThisModule.allInstances()->exists(thisModule|Annotation.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then let genSelf1 = src in
	if genSelf1.refImmediateComposite().oclIsTypeOf(FieldDeclaration)
	then false
	else if genSelf1.refImmediateComposite().oclIsTypeOf(VariableDeclarationStatement)
	then not (genSelf1.refImmediateComposite().isUndefined())
	else false
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1692:3-1692:38): 
ThisModule.allInstances()->exists(thisModule|(ArrayCreation.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src1 = src.type in
	let _problem_2 = src1.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_2)
	then let src3 = _problem_2.oclAsType(AbstractMethodDeclaration) in
	src3.typeParameters.isEmpty()
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_2)
	then let src4 = _problem_2.oclAsType(AbstractMethodDeclaration) in
	not (src4.typeParameters.isEmpty())
	else false
	endif)
	endif)) or (ClassInstanceCreation.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src5 = src.type in
	let _problem_6 = src5.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_6)
	then let src7 = _problem_6.oclAsType(AbstractMethodDeclaration) in
	src7.typeParameters.isEmpty()
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_6)
	then let src8 = _problem_6.oclAsType(AbstractMethodDeclaration) in
	not (src8.typeParameters.isEmpty())
	else false
	endif)
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (170:4-174:10): 
ThisModule.allInstances()->exists(thisModule|(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((Initializer.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined()))) or (ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (InterfaceDeclaration.allInstances()->exists(src|let javaAttributes2 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (EnumDeclaration.allInstances()->exists(src|let javaAttributes3 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (AnnotationTypeDeclaration.allInstances()->exists(src|let javaAttributes4 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (AnnotationTypeMemberDeclaration.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (FieldDeclaration.allInstances()->exists(src|if src.fragments->isEmpty()
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (EnumConstantDeclaration.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (SingleVariableDeclaration.allInstances()->exists(src|if if src.methodDeclaration.isUndefined()
	then false
	else true
	endif
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (SingleVariableDeclaration.allInstances()->exists(src|if src.methodDeclaration.isUndefined()
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (VariableDeclarationFragment.allInstances()->exists(src|if not (src.variablesContainer.oclIsKindOf(FieldDeclaration))
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (VariableDeclarationFragment.allInstances()->exists(src|if src.variablesContainer.oclIsKindOf(FieldDeclaration)
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (AnonymousClassDeclaration.allInstances()->exists(src|let javaAttributes5 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let originalTypeAccess6 = src.refImmediateComposite().type in
	let tgt7 = oclUndefined(OclVoid) in
	not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (Block.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (AssertStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (BreakStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (CatchClause.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ConstructorInvocation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ContinueStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (DoStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (EmptyStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (EnhancedForStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ExpressionStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ForStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (IfStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (LabeledStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ReturnStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (SuperConstructorInvocation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (SwitchCase.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (SwitchStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (SynchronizedStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ThrowStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (TypeDeclarationStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (TryStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (VariableDeclarationStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (WhileStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ArrayAccess.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ArrayCreation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ArrayInitializer.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (ArrayLengthAccess.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (Assignment.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (BooleanLiteral.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (CastExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (CharacterLiteral.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ClassInstanceCreation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ConditionalExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (FieldAccess.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (InfixExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (InstanceofExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (MethodInvocation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (NullLiteral.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (NumberLiteral.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ParenthesizedExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (PostfixExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (PrefixExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (StringLiteral.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (SuperFieldAccess.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (SuperMethodInvocation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ThisExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (TypeLiteral.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (VariableDeclarationExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined()))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1742:3-1742:14): 
Dead code

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1764:4-1764:58): 
ThisModule.allInstances()->exists(thisModule|ArrayAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.array) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1764:4-1764:58): 
ThisModule.allInstances()->exists(thisModule|ArrayAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.array) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1774:4-1774:58): 
ThisModule.allInstances()->exists(thisModule|ArrayAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.index) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1774:4-1774:58): 
ThisModule.allInstances()->exists(thisModule|ArrayAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.index) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1786:19-1786:90): 
ThisModule.allInstances()->exists(thisModule|ArrayCreation.allInstances()->exists(src|src.dimensions->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1786:4-1786:90): 
ThisModule.allInstances()->exists(thisModule|ArrayCreation.allInstances()->exists(src|src.dimensions->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1786:4-1786:90): 
ThisModule.allInstances()->exists(thisModule|ArrayCreation.allInstances()->exists(src|src.dimensions->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1787:4-1787:64): 
ThisModule.allInstances()->exists(thisModule|ArrayCreation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.initializer) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1787:4-1787:64): 
ThisModule.allInstances()->exists(thisModule|ArrayCreation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.initializer) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1801:19-1802:65): 
ThisModule.allInstances()->exists(thisModule|ArrayInitializer.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then src.expressions->select(e|not (e.oclIsTypeOf(Annotation)))->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1801:4-1802:65): 
ThisModule.allInstances()->exists(thisModule|ArrayInitializer.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then src.expressions->select(e|not (e.oclIsTypeOf(Annotation)))->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1801:4-1802:65): 
ThisModule.allInstances()->exists(thisModule|ArrayInitializer.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then src.expressions->select(e|not (e.oclIsTypeOf(Annotation)))->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1816:4-1816:58): 
ThisModule.allInstances()->exists(thisModule|ArrayLengthAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.array) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1816:4-1816:58): 
ThisModule.allInstances()->exists(thisModule|ArrayLengthAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.array) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1836:4-1836:65): 
ThisModule.allInstances()->exists(thisModule|Assignment.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftHandSide) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1836:4-1836:65): 
ThisModule.allInstances()->exists(thisModule|Assignment.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftHandSide) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1845:4-1845:66): 
ThisModule.allInstances()->exists(thisModule|Assignment.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.rightHandSide) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1845:4-1845:66): 
ThisModule.allInstances()->exists(thisModule|Assignment.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.rightHandSide) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1876:4-1876:63): 
ThisModule.allInstances()->exists(thisModule|CastExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1876:4-1876:63): 
ThisModule.allInstances()->exists(thisModule|CastExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1885:3-1885:38): 
ThisModule.allInstances()->exists(thisModule|((((CastExpression.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src1 = src.type in
	let _problem_2 = src1.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_2)
	then let src3 = _problem_2.oclAsType(AbstractMethodDeclaration) in
	src3.typeParameters.isEmpty()
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_2)
	then let src4 = _problem_2.oclAsType(AbstractMethodDeclaration) in
	not (src4.typeParameters.isEmpty())
	else false
	endif)
	endif)) or (InstanceofExpression.allInstances()->exists(src|if src.rightOperand.isUndefined()
	then false
	else let src5 = src.rightOperand in
	let _problem_6 = src5.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_6)
	then let src7 = _problem_6.oclAsType(AbstractMethodDeclaration) in
	src7.typeParameters.isEmpty()
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_6)
	then let src8 = _problem_6.oclAsType(AbstractMethodDeclaration) in
	not (src8.typeParameters.isEmpty())
	else false
	endif)
	endif))) or (SuperFieldAccess.allInstances()->exists(src|if src.field.isUndefined()
	then false
	else let src9 = src.field in
	let _problem_10 = src9.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_10)
	then let src11 = _problem_10.oclAsType(AbstractMethodDeclaration) in
	src11.typeParameters.isEmpty()
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_10)
	then let src12 = _problem_10.oclAsType(AbstractMethodDeclaration) in
	not (src12.typeParameters.isEmpty())
	else false
	endif)
	endif))) or (ThisExpression.allInstances()->exists(src|if src.qualifier.isUndefined()
	then false
	else let src13 = src.qualifier in
	let _problem_14 = src13.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_14)
	then let src15 = _problem_14.oclAsType(AbstractMethodDeclaration) in
	src15.typeParameters.isEmpty()
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_14)
	then let src16 = _problem_14.oclAsType(AbstractMethodDeclaration) in
	not (src16.typeParameters.isEmpty())
	else false
	endif)
	endif))) or (VariableDeclarationExpression.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src17 = src.type in
	let _problem_18 = src17.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_18)
	then let src19 = _problem_18.oclAsType(AbstractMethodDeclaration) in
	src19.typeParameters.isEmpty()
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_18)
	then let src20 = _problem_18.oclAsType(AbstractMethodDeclaration) in
	not (src20.typeParameters.isEmpty())
	else false
	endif)
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1886:4-1886:18): 
ThisModule.allInstances()->exists(thisModule|((((CastExpression.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src1 = src.type in
	let _problem_2 = src1.type in
	(not (_problem_2.isUndefined())) and (((((((((((((((((((not (if ClassDeclaration.allInstances()->includes(_problem_2)
	then let src3 = _problem_2.oclAsType(ClassDeclaration) in
	src3.typeParameters.isEmpty()
	else false
	endif)) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_2)
	then let src4 = _problem_2.oclAsType(InterfaceDeclaration) in
	not (src4.typeParameters.isEmpty())
	else false
	endif))) and (not (if EnumDeclaration.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_2)
	then let src5 = _problem_2.oclAsType(ClassDeclaration) in
	not (src5.typeParameters.isEmpty())
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_2)
	then let src6 = _problem_2.oclAsType(InterfaceDeclaration) in
	src6.typeParameters.isEmpty()
	else false
	endif))) and (not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_2)
	then true
	else false
	endif)))
	endif)) or (InstanceofExpression.allInstances()->exists(src|if src.rightOperand.isUndefined()
	then false
	else let src7 = src.rightOperand in
	let _problem_8 = src7.type in
	(not (_problem_8.isUndefined())) and (((((((((((((((((((not (if ClassDeclaration.allInstances()->includes(_problem_8)
	then let src9 = _problem_8.oclAsType(ClassDeclaration) in
	src9.typeParameters.isEmpty()
	else false
	endif)) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_8)
	then let src10 = _problem_8.oclAsType(InterfaceDeclaration) in
	not (src10.typeParameters.isEmpty())
	else false
	endif))) and (not (if EnumDeclaration.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_8)
	then let src11 = _problem_8.oclAsType(ClassDeclaration) in
	not (src11.typeParameters.isEmpty())
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_8)
	then let src12 = _problem_8.oclAsType(InterfaceDeclaration) in
	src12.typeParameters.isEmpty()
	else false
	endif))) and (not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_8)
	then true
	else false
	endif)))
	endif))) or (SuperFieldAccess.allInstances()->exists(src|if src.field.isUndefined()
	then false
	else let src13 = src.field in
	let _problem_14 = src13.type in
	(not (_problem_14.isUndefined())) and (((((((((((((((((((not (if ClassDeclaration.allInstances()->includes(_problem_14)
	then let src15 = _problem_14.oclAsType(ClassDeclaration) in
	src15.typeParameters.isEmpty()
	else false
	endif)) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_14)
	then let src16 = _problem_14.oclAsType(InterfaceDeclaration) in
	not (src16.typeParameters.isEmpty())
	else false
	endif))) and (not (if EnumDeclaration.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_14)
	then let src17 = _problem_14.oclAsType(ClassDeclaration) in
	not (src17.typeParameters.isEmpty())
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_14)
	then let src18 = _problem_14.oclAsType(InterfaceDeclaration) in
	src18.typeParameters.isEmpty()
	else false
	endif))) and (not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_14)
	then true
	else false
	endif)))
	endif))) or (ThisExpression.allInstances()->exists(src|if src.qualifier.isUndefined()
	then false
	else let src19 = src.qualifier in
	let _problem_20 = src19.type in
	(not (_problem_20.isUndefined())) and (((((((((((((((((((not (if ClassDeclaration.allInstances()->includes(_problem_20)
	then let src21 = _problem_20.oclAsType(ClassDeclaration) in
	src21.typeParameters.isEmpty()
	else false
	endif)) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_20)
	then let src22 = _problem_20.oclAsType(InterfaceDeclaration) in
	not (src22.typeParameters.isEmpty())
	else false
	endif))) and (not (if EnumDeclaration.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_20)
	then let src23 = _problem_20.oclAsType(ClassDeclaration) in
	not (src23.typeParameters.isEmpty())
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_20)
	then let src24 = _problem_20.oclAsType(InterfaceDeclaration) in
	src24.typeParameters.isEmpty()
	else false
	endif))) and (not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_20)
	then true
	else false
	endif)))
	endif))) or (VariableDeclarationExpression.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src25 = src.type in
	let _problem_26 = src25.type in
	(not (_problem_26.isUndefined())) and (((((((((((((((((((not (if ClassDeclaration.allInstances()->includes(_problem_26)
	then let src27 = _problem_26.oclAsType(ClassDeclaration) in
	src27.typeParameters.isEmpty()
	else false
	endif)) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_26)
	then let src28 = _problem_26.oclAsType(InterfaceDeclaration) in
	not (src28.typeParameters.isEmpty())
	else false
	endif))) and (not (if EnumDeclaration.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_26)
	then let src29 = _problem_26.oclAsType(ClassDeclaration) in
	not (src29.typeParameters.isEmpty())
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_26)
	then let src30 = _problem_26.oclAsType(InterfaceDeclaration) in
	src30.typeParameters.isEmpty()
	else false
	endif))) and (not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_26)
	then true
	else false
	endif)))
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1907:4-1907:63): 
ThisModule.allInstances()->exists(thisModule|ClassInstanceCreation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1907:4-1907:63): 
ThisModule.allInstances()->exists(thisModule|ClassInstanceCreation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1908:19-1908:89): 
ThisModule.allInstances()->exists(thisModule|ClassInstanceCreation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1908:4-1908:89): 
ThisModule.allInstances()->exists(thisModule|ClassInstanceCreation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1908:4-1908:89): 
ThisModule.allInstances()->exists(thisModule|ClassInstanceCreation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1924:4-1924:63): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1924:4-1924:63): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1925:4-1925:67): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.thenExpression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1925:4-1925:67): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.thenExpression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1926:4-1926:67): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.elseExpression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1926:4-1926:67): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.elseExpression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1937:4-1937:63): 
ThisModule.allInstances()->exists(thisModule|FieldAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1937:4-1937:63): 
ThisModule.allInstances()->exists(thisModule|FieldAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1957:4-1957:64): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftOperand) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1957:4-1957:64): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftOperand) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1958:4-1958:65): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.rightOperand) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1958:4-1958:65): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.rightOperand) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1959:19-1959:96): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|src.extendedOperands->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1959:4-1959:96): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|src.extendedOperands->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1959:4-1959:96): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|src.extendedOperands->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1970:4-1970:64): 
ThisModule.allInstances()->exists(thisModule|InstanceofExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftOperand) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1970:4-1970:64): 
ThisModule.allInstances()->exists(thisModule|InstanceofExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftOperand) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1982:4-1982:63): 
ThisModule.allInstances()->exists(thisModule|MethodInvocation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1982:4-1982:63): 
ThisModule.allInstances()->exists(thisModule|MethodInvocation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1983:19-1983:89): 
ThisModule.allInstances()->exists(thisModule|MethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1983:4-1983:89): 
ThisModule.allInstances()->exists(thisModule|MethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1983:4-1983:89): 
ThisModule.allInstances()->exists(thisModule|MethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (2024:4-2024:63): 
ThisModule.allInstances()->exists(thisModule|ParenthesizedExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (2024:4-2024:63): 
ThisModule.allInstances()->exists(thisModule|ParenthesizedExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (2035:4-2035:60): 
ThisModule.allInstances()->exists(thisModule|PostfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.operand) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (2035:4-2035:60): 
ThisModule.allInstances()->exists(thisModule|PostfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.operand) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (2046:4-2046:60): 
ThisModule.allInstances()->exists(thisModule|PrefixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.operand) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (2046:4-2046:60): 
ThisModule.allInstances()->exists(thisModule|PrefixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.operand) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (2089:19-2089:89): 
ThisModule.allInstances()->exists(thisModule|SuperMethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (2089:4-2089:89): 
ThisModule.allInstances()->exists(thisModule|SuperMethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (2089:4-2089:89): 
ThisModule.allInstances()->exists(thisModule|SuperMethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (2136:19-2136:89): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationExpression.allInstances()->exists(src|src.fragments->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (2136:4-2136:89): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationExpression.allInstances()->exists(src|src.fragments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (2136:4-2136:89): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationExpression.allInstances()->exists(src|src.fragments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (268:4-268:33): 
ThisModule.allInstances()->exists(thisModule|ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then let _problem_2 = javaAttributes1 in
	(((if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (295:4-295:33): 
ThisModule.allInstances()->exists(thisModule|AnonymousClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let originalTypeAccess2 = src.refImmediateComposite().type in
	let tgt3 = oclUndefined(OclVoid) in
	let _problem_4 = javaAttributes1 in
	(((if AnnotationMemberValuePair.allInstances()->includes(_problem_4)
	then true
	else false
	endif) or (if Archive.allInstances()->includes(_problem_4)
	then true
	else false
	endif)) or (if LabeledStatement.allInstances()->includes(_problem_4)
	then true
	else false
	endif)) or (if CompilationUnit.allInstances()->includes(_problem_4)
	then true
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (341:3-341:32): 
ThisModule.allInstances()->exists(thisModule|InterfaceDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then let _problem_2 = javaAttributes1 in
	(((if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (365:4-365:33): 
ThisModule.allInstances()->exists(thisModule|EnumDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let _problem_2 = javaAttributes1 in
	(((if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (420:4-420:33): 
ThisModule.allInstances()->exists(thisModule|AnnotationTypeDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let _problem_2 = javaAttributes1 in
	(((if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (499:4-503:10): 
ThisModule.allInstances()->exists(thisModule|(ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let type2 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then let type3 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif
	else false
	endif)) or (InterfaceDeclaration.allInstances()->exists(src|let javaAttributes4 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if not (src.typeParameters.isEmpty())
	then let type5 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (524:4-524:33): 
ThisModule.allInstances()->exists(thisModule|ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let type2 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then let _problem_3 = javaAttributes1 in
	(((if AnnotationMemberValuePair.allInstances()->includes(_problem_3)
	then true
	else false
	endif) or (if Archive.allInstances()->includes(_problem_3)
	then true
	else false
	endif)) or (if LabeledStatement.allInstances()->includes(_problem_3)
	then true
	else false
	endif)) or (if CompilationUnit.allInstances()->includes(_problem_3)
	then true
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (552:3-552:32): 
ThisModule.allInstances()->exists(thisModule|InterfaceDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if not (src.typeParameters.isEmpty())
	then let _problem_2 = javaAttributes1 in
	(((if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (582:4-590:10): 
ThisModule.allInstances()->exists(thisModule|ParameterizedType.allInstances()->exists(src|not (if src.type.type->oclIsKindOf(UnresolvedTypeDeclaration)
	then oclUndefined(OclVoid)
	else if src.type.type.typeParameters(thisModule).isEmpty()
	then oclUndefined(OclVoid)
	else src.type->getType()
	endif
	endif.isUndefined())))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (585:10-585:38): 
ThisModule.allInstances()->exists(thisModule|ParameterizedType.allInstances()->exists(src|if src.type.type->oclIsKindOf(UnresolvedTypeDeclaration)
	then false
	else if not (src.type.type.isUndefined())
	then not (ClassDeclaration.allInstances()->includes(src.type.type))
	else false
	endif
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (617:4-617:47): 
ThisModule.allInstances()->exists(thisModule|((((ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let javaExtends2 = e in
	let _problem_3 = javaExtends2.refImmediateComposite() in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_3)
	then let src4 = _problem_3.oclAsType(AbstractMethodDeclaration) in
	src4.typeParameters.isEmpty()
	else false
	endif
	endif)
	else false
	endif)) or (InterfaceDeclaration.allInstances()->exists(src|let javaAttributes5 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let javaExtends6 = e in
	let _problem_7 = javaExtends6.refImmediateComposite() in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_7)
	then let src8 = _problem_7.oclAsType(AbstractMethodDeclaration) in
	src8.typeParameters.isEmpty()
	else false
	endif
	endif)
	else false
	endif))) or (EnumDeclaration.allInstances()->exists(src|let javaAttributes9 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let javaExtends10 = e in
	let _problem_11 = javaExtends10.refImmediateComposite() in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_11)
	then let src12 = _problem_11.oclAsType(AbstractMethodDeclaration) in
	src12.typeParameters.isEmpty()
	else false
	endif
	endif)))) or (AnnotationTypeDeclaration.allInstances()->exists(src|let javaAttributes13 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let javaExtends14 = e in
	let _problem_15 = javaExtends14.refImmediateComposite() in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_15)
	then let src16 = _problem_15.oclAsType(AbstractMethodDeclaration) in
	src16.typeParameters.isEmpty()
	else false
	endif
	endif)))) or (ClassDeclaration.allInstances()->exists(src|let javaAttributes17 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then if src.superClass.isUndefined()
	then false
	else let javaExtends18 = src.superClass in
	let _problem_19 = javaExtends18.refImmediateComposite() in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_19)
	then let src20 = _problem_19.oclAsType(AbstractMethodDeclaration) in
	src20.typeParameters.isEmpty()
	else false
	endif
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (625:3-625:21): 
ThisModule.allInstances()->exists(thisModule|((ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let type2 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then let type3 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let targetFrom4 = type3 in
	let sourceTo5 = e in
	not (targetFrom4.isUndefined())
	endif)
	else false
	endif
	else false
	endif)) or (InterfaceDeclaration.allInstances()->exists(src|let javaAttributes6 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if not (src.typeParameters.isEmpty())
	then let type7 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let targetFrom8 = type7 in
	let sourceTo9 = e in
	not (targetFrom8.isUndefined())
	endif)
	else false
	endif
	else false
	endif))) or (ClassDeclaration.allInstances()->exists(src|let javaAttributes10 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let type11 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then if src.superClass.isUndefined()
	then false
	else let targetFrom12 = type11 in
	let sourceTo13 = src.superClass in
	not (targetFrom12.isUndefined())
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (903:14-903:28): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (906:46-906:60): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.returnType(thisModule).isUndefined()
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (910:4-910:35): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then src.parameters->select(i1|not (i1.isUndefined()))->exists(_problem_|if SingleVariableDeclaration.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(SingleVariableDeclaration) in
	src2.methodDeclaration.isUndefined()
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (919:12-919:42): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (922:48-922:78): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (965:13-965:43): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (968:49-968:79): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (986:5-990:10): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (998:13-998:27): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	else false
	endif))

#########################################

third-party/largeprojects/modisco/java2kdm/javaToKdm.atl
anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1001:47-1001:61): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.returnType(thisModule).isUndefined()
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1005:4-1005:35): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then src.parameters->select(i1|not (i1.isUndefined()))->exists(_problem_|if SingleVariableDeclaration.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(SingleVariableDeclaration) in
	src2.methodDeclaration.isUndefined()
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.OperationNotFoundImpl (1030:9-1030:77): 
ThisModule.allInstances()->exists(thisModule|Comment.allInstances()->exists(src|if ((not (src.refImmediateComposite().oclIsTypeOf(AnonymousClassDeclaration))) and (not (src.refImmediateComposite().oclIsTypeOf(ImportDeclaration)))) and (not ((src.refImmediateComposite().oclIsKindOf(Expression)) and (thisModule->filterExpression(src.refImmediateComposite())->isEmpty())))
	then not (thisModule->filterExpression(src.refImmediateComposite()).isUndefined())
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (1046:3-1046:14): 
ThisModule.allInstances()->exists(thisModule|(AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else let src1 = src in
	let redefined2 = src.redefinedMethodDeclaration(thisModule) in
	not (src1.isUndefined())
	endif
	endif
	else false
	endif)) or (AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else let src3 = src in
	let redefined4 = src.redefinedMethodDeclaration(thisModule) in
	not (src3.isUndefined())
	endif
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (1047:4-1047:19): 
ThisModule.allInstances()->exists(thisModule|(AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else let src1 = src in
	let redefined2 = src.redefinedMethodDeclaration(thisModule) in
	not (redefined2.isUndefined())
	endif
	endif
	else false
	endif)) or (AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else let src3 = src in
	let redefined4 = src.redefinedMethodDeclaration(thisModule) in
	not (redefined4.isUndefined())
	endif
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (106:5-106:85): 
ThisModule.allInstances()->exists(thisModule|Model.allInstances()->exists(src|src.orphanTypes->select(e|not (e.oclIsKindOf(PrimitiveType)))->select(i1|not (i1.isUndefined()))->exists(_problem_|((((((((((((((((((not (if InterfaceDeclaration.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(InterfaceDeclaration) in
	not (src2.typeParameters.isEmpty())
	else false
	endif)) and (not (if EnumDeclaration.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ClassDeclaration) in
	not (src3.typeParameters.isEmpty())
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(ClassDeclaration) in
	src4.typeParameters.isEmpty()
	else false
	endif))) and (not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_)
	then let src5 = _problem_.oclAsType(InterfaceDeclaration) in
	src5.typeParameters.isEmpty()
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (1095:5-1099:10): 
ThisModule.allInstances()->exists(thisModule|(AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.returnType(thisModule).isUndefined()
	then false
	else let src1 = src.returnType(thisModule) in
	not (if src1.originalCompilationUnit.isUndefined()
	then src1.originalClassFile
	else src1.originalCompilationUnit
	endif.isUndefined())
	endif
	endif
	else false
	endif)) or (AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.returnType(thisModule).isUndefined()
	then false
	else let src2 = src.returnType(thisModule) in
	not (if src2.originalCompilationUnit.isUndefined()
	then src2.originalClassFile
	else src2.originalCompilationUnit
	endif.isUndefined())
	endif
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (1124:5-1128:10): 
ThisModule.allInstances()->exists(thisModule|(AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then src.thrownExceptions->exists(e|let src1 = e in
	not (if src1.originalCompilationUnit.isUndefined()
	then src1.originalClassFile
	else src1.originalCompilationUnit
	endif.isUndefined()))
	else false
	endif)) or (AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then src.thrownExceptions->exists(e|let src2 = e in
	not (if src2.originalCompilationUnit.isUndefined()
	then src2.originalClassFile
	else src2.originalCompilationUnit
	endif.isUndefined()))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1176:4-1176:63): 
ThisModule.allInstances()->exists(thisModule|AssertStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1176:4-1176:63): 
ThisModule.allInstances()->exists(thisModule|AssertStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1177:4-1177:100): 
ThisModule.allInstances()->exists(thisModule|AssertStatement.allInstances()->exists(src|if src.message.isUndefined()
	then Sequence {  }
	else Sequence { src.message }
	endif->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1177:4-1177:100): 
ThisModule.allInstances()->exists(thisModule|AssertStatement.allInstances()->exists(src|if src.message.isUndefined()
	then Sequence {  }
	else Sequence { src.message }
	endif->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1209:4-1209:20): 
ThisModule.allInstances()->exists(thisModule|((((ConstructorInvocation.allInstances()->exists(src|if src.method.isUndefined()
	then false
	else if src.method.typeParameters.isEmpty()
	then let src1 = src in
	let _problem_2 = src1.method in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_2)
	then let src3 = _problem_2.oclAsType(AbstractMethodDeclaration) in
	not (src3.typeParameters.isEmpty())
	else false
	endif
	else false
	endif
	endif)) or (SuperConstructorInvocation.allInstances()->exists(src|if src.method.isUndefined()
	then false
	else if src.method.typeParameters.isEmpty()
	then let src4 = src in
	let _problem_5 = src4.method in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_5)
	then let src6 = _problem_5.oclAsType(AbstractMethodDeclaration) in
	not (src6.typeParameters.isEmpty())
	else false
	endif
	else false
	endif
	endif))) or (ClassInstanceCreation.allInstances()->exists(src|if src.method.isUndefined()
	then false
	else let src7 = src in
	let _problem_8 = src7.method in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_8)
	then let src9 = _problem_8.oclAsType(AbstractMethodDeclaration) in
	not (src9.typeParameters.isEmpty())
	else false
	endif
	endif))) or (MethodInvocation.allInstances()->exists(src|if src.method.isUndefined()
	then false
	else if src.method.typeParameters.isEmpty()
	then let src10 = src in
	let _problem_11 = src10.method in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_11)
	then let src12 = _problem_11.oclAsType(AbstractMethodDeclaration) in
	not (src12.typeParameters.isEmpty())
	else false
	endif
	else false
	endif
	endif))) or (SuperMethodInvocation.allInstances()->exists(src|if src.method.isUndefined()
	then false
	else if src.method.typeParameters.isEmpty()
	then let src13 = src in
	let _problem_14 = src13.method in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_14)
	then let src15 = _problem_14.oclAsType(AbstractMethodDeclaration) in
	not (src15.typeParameters.isEmpty())
	else false
	endif
	else false
	endif
	endif)))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1218:10-1218:19): 
ThisModule.allInstances()->exists(thisModule|(BreakStatement.allInstances()->exists(src|if src.label.isUndefined()
	then false
	else let src1 = src in
	not (BreakStatement.allInstances()->includes(src1))
	endif)) or (ContinueStatement.allInstances()->exists(src|if src.label.isUndefined()
	then false
	else let src2 = src in
	not (BreakStatement.allInstances()->includes(src2))
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1218:4-1218:19): 
ThisModule.allInstances()->exists(thisModule|(BreakStatement.allInstances()->exists(src|if src.label.isUndefined()
	then false
	else let src1 = src in
	let _problem_2 = src1.label(thisModule) in
	if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif
	endif)) or (ContinueStatement.allInstances()->exists(src|if src.label.isUndefined()
	then false
	else let src3 = src in
	let _problem_4 = src3.label(thisModule) in
	if LabeledStatement.allInstances()->includes(_problem_4)
	then true
	else false
	endif
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1254:4-1254:109): 
ThisModule.allInstances()->exists(thisModule|SingleVariableDeclaration.allInstances()->exists(src|if src.methodDeclaration.isUndefined()
	then if src.initializer.isUndefined()
	then Sequence {  }
	else Sequence { src.initializer }
	endif->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1254:4-1254:109): 
ThisModule.allInstances()->exists(thisModule|SingleVariableDeclaration.allInstances()->exists(src|if src.methodDeclaration.isUndefined()
	then if src.initializer.isUndefined()
	then Sequence {  }
	else Sequence { src.initializer }
	endif->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif) or (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if StringLiteral.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(StringLiteral) in
	not (src2.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif)) or (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if Annotation.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(Annotation) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)) or (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(ArrayInitializer) in
	not (src4.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)) or (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) or (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1271:4-1271:32): 
ThisModule.allInstances()->exists(thisModule|ConstructorInvocation.allInstances()->exists(src|src.arguments->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1271:4-1271:32): 
ThisModule.allInstances()->exists(thisModule|ConstructorInvocation.allInstances()->exists(src|src.arguments->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1293:4-1293:63): 
ThisModule.allInstances()->exists(thisModule|DoStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1293:4-1293:63): 
ThisModule.allInstances()->exists(thisModule|DoStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1315:4-1315:63): 
ThisModule.allInstances()->exists(thisModule|EnhancedForStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1315:4-1315:63): 
ThisModule.allInstances()->exists(thisModule|EnhancedForStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1328:4-1328:63): 
ThisModule.allInstances()->exists(thisModule|ExpressionStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1328:4-1328:63): 
ThisModule.allInstances()->exists(thisModule|ExpressionStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1339:4-1339:63): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1339:4-1339:63): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1340:4-1340:35): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|src.initializers->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1340:4-1340:35): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|src.initializers->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1341:4-1341:31): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|src.updaters->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1341:4-1341:31): 
ThisModule.allInstances()->exists(thisModule|ForStatement.allInstances()->exists(src|src.updaters->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1353:4-1353:63): 
ThisModule.allInstances()->exists(thisModule|IfStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1353:4-1353:63): 
ThisModule.allInstances()->exists(thisModule|IfStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1377:4-1377:63): 
ThisModule.allInstances()->exists(thisModule|ReturnStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1377:4-1377:63): 
ThisModule.allInstances()->exists(thisModule|ReturnStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1395:19-1395:89): 
ThisModule.allInstances()->exists(thisModule|SuperConstructorInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1395:4-1395:89): 
ThisModule.allInstances()->exists(thisModule|SuperConstructorInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1395:4-1395:89): 
ThisModule.allInstances()->exists(thisModule|SuperConstructorInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1396:4-1396:63): 
ThisModule.allInstances()->exists(thisModule|SuperConstructorInvocation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1396:4-1396:63): 
ThisModule.allInstances()->exists(thisModule|SuperConstructorInvocation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1407:4-1407:63): 
ThisModule.allInstances()->exists(thisModule|SwitchCase.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1407:4-1407:63): 
ThisModule.allInstances()->exists(thisModule|SwitchCase.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1418:4-1418:63): 
ThisModule.allInstances()->exists(thisModule|SwitchStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1418:4-1418:63): 
ThisModule.allInstances()->exists(thisModule|SwitchStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1430:4-1430:63): 
ThisModule.allInstances()->exists(thisModule|SynchronizedStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1430:4-1430:63): 
ThisModule.allInstances()->exists(thisModule|SynchronizedStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1442:4-1442:63): 
ThisModule.allInstances()->exists(thisModule|ThrowStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1442:4-1442:63): 
ThisModule.allInstances()->exists(thisModule|ThrowStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1480:4-1481:52): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationStatement.allInstances()->exists(src|src.fragments->select(fragment|fragment.initializer.oclIsTypeOf(ClassInstanceCreation))->collect(fragment|fragment.initializer)->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1480:4-1481:52): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationStatement.allInstances()->exists(src|src.fragments->select(fragment|fragment.initializer.oclIsTypeOf(ClassInstanceCreation))->collect(fragment|fragment.initializer)->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1503:11-1503:47): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationFragment.allInstances()->exists(src|if not (src.variablesContainer.oclIsKindOf(FieldDeclaration))
	then if src.refImmediateComposite().oclIsTypeOf(Model)
	then false
	else if not (src.refImmediateComposite().isUndefined())
	then not (FieldDeclaration.allInstances()->includes(src.refImmediateComposite()))
	else false
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1506:8-1506:44): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationFragment.allInstances()->exists(src|if not (src.variablesContainer.oclIsKindOf(FieldDeclaration))
	then if src.refImmediateComposite().oclIsTypeOf(Model)
	then false
	else if src.refImmediateComposite().modifier(thisModule).isUndefined()
	then false
	else if not (src.refImmediateComposite().isUndefined())
	then not (FieldDeclaration.allInstances()->includes(src.refImmediateComposite()))
	else false
	endif
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1527:4-1536:10): 
ThisModule.allInstances()->exists(thisModule|(VariableDeclarationFragment.allInstances()->exists(src|if not (src.variablesContainer.oclIsKindOf(FieldDeclaration))
	then if src.initializer.isUndefined()
	then false
	else let src1 = src in
	let value2 = src.initializer in
	let _problem_3 = if value2.oclIsTypeOf(SingleVariableAccess)
	then value2.variable(thisModule)
	else if value2.oclIsTypeOf(UnresolvedItemAccess)
	then thisModule->CreateDatatype(value2)
	else value2
	endif
	endif in
	(not (_problem_3.isUndefined())) and (((((((((((((((((((((((((((((((not (if EnumConstantDeclaration.allInstances()->includes(_problem_3)
	then true
	else false
	endif)) and (not (if SingleVariableDeclaration.allInstances()->includes(_problem_3)
	then let src4 = _problem_3.oclAsType(SingleVariableDeclaration) in
	src4.methodDeclaration.isUndefined()
	else false
	endif))) and (not (if SingleVariableDeclaration.allInstances()->includes(_problem_3)
	then let src5 = _problem_3.oclAsType(SingleVariableDeclaration) in
	if src5.methodDeclaration.isUndefined()
	then false
	else true
	endif
	else false
	endif))) and (not (if VariableDeclarationFragment.allInstances()->includes(_problem_3)
	then let src6 = _problem_3.oclAsType(VariableDeclarationFragment) in
	src6.variablesContainer.oclIsKindOf(FieldDeclaration)
	else false
	endif))) and (not (if VariableDeclarationFragment.allInstances()->includes(_problem_3)
	then let src7 = _problem_3.oclAsType(VariableDeclarationFragment) in
	not (src7.variablesContainer.oclIsKindOf(FieldDeclaration))
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_3)
	then let src8 = _problem_3.oclAsType(Annotation) in
	not (src8.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_3)
	then let src9 = _problem_3.oclAsType(ArrayInitializer) in
	not (src9.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_3)
	then let src10 = _problem_3.oclAsType(StringLiteral) in
	not (src10.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_3)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_3)
	then true
	else false
	endif)))
	endif
	else false
	endif)) or (VariableDeclarationFragment.allInstances()->exists(src|if src.variablesContainer.oclIsKindOf(FieldDeclaration)
	then if src.initializer.isUndefined()
	then false
	else let src11 = src in
	let value12 = src.initializer in
	let _problem_13 = if value12.oclIsTypeOf(SingleVariableAccess)
	then value12.variable(thisModule)
	else if value12.oclIsTypeOf(UnresolvedItemAccess)
	then thisModule->CreateDatatype(value12)
	else value12
	endif
	endif in
	(not (_problem_13.isUndefined())) and (((((((((((((((((((((((((((((((not (if EnumConstantDeclaration.allInstances()->includes(_problem_13)
	then true
	else false
	endif)) and (not (if SingleVariableDeclaration.allInstances()->includes(_problem_13)
	then let src14 = _problem_13.oclAsType(SingleVariableDeclaration) in
	src14.methodDeclaration.isUndefined()
	else false
	endif))) and (not (if SingleVariableDeclaration.allInstances()->includes(_problem_13)
	then let src15 = _problem_13.oclAsType(SingleVariableDeclaration) in
	if src15.methodDeclaration.isUndefined()
	then false
	else true
	endif
	else false
	endif))) and (not (if VariableDeclarationFragment.allInstances()->includes(_problem_13)
	then let src16 = _problem_13.oclAsType(VariableDeclarationFragment) in
	src16.variablesContainer.oclIsKindOf(FieldDeclaration)
	else false
	endif))) and (not (if VariableDeclarationFragment.allInstances()->includes(_problem_13)
	then let src17 = _problem_13.oclAsType(VariableDeclarationFragment) in
	not (src17.variablesContainer.oclIsKindOf(FieldDeclaration))
	else false
	endif))) and (not (if SuperFieldAccess.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ThisExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_13)
	then let src18 = _problem_13.oclAsType(Annotation) in
	not (src18.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_13)
	then let src19 = _problem_13.oclAsType(ArrayInitializer) in
	not (src19.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_13)
	then let src20 = _problem_13.oclAsType(StringLiteral) in
	not (src20.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_13)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_13)
	then true
	else false
	endif)))
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1527:4-1536:10): 
ThisModule.allInstances()->exists(thisModule|(VariableDeclarationFragment.allInstances()->exists(src|if not (src.variablesContainer.oclIsKindOf(FieldDeclaration))
	then if src.initializer.isUndefined()
	then false
	else let src1 = src in
	let value2 = src.initializer in
	let _problem_3 = if value2.oclIsTypeOf(SingleVariableAccess)
	then value2.variable(thisModule)
	else if value2.oclIsTypeOf(UnresolvedItemAccess)
	then thisModule->CreateDatatype(value2)
	else value2
	endif
	endif in
	if Annotation.allInstances()->includes(_problem_3)
	then let src4 = _problem_3.oclAsType(Annotation) in
	not (src4.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif
	endif
	else false
	endif)) or (VariableDeclarationFragment.allInstances()->exists(src|if src.variablesContainer.oclIsKindOf(FieldDeclaration)
	then if src.initializer.isUndefined()
	then false
	else let src5 = src in
	let value6 = src.initializer in
	let _problem_7 = if value6.oclIsTypeOf(SingleVariableAccess)
	then value6.variable(thisModule)
	else if value6.oclIsTypeOf(UnresolvedItemAccess)
	then thisModule->CreateDatatype(value6)
	else value6
	endif
	endif in
	if Annotation.allInstances()->includes(_problem_7)
	then let src8 = _problem_7.oclAsType(Annotation) in
	not (src8.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1586:4-1586:63): 
ThisModule.allInstances()->exists(thisModule|WhileStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1586:4-1586:63): 
ThisModule.allInstances()->exists(thisModule|WhileStatement.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1655:3-1655:58): 
ThisModule.allInstances()->exists(thisModule|Annotation.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then let _problem_1 = src->filterRefImmediateCompositeForAnnotation() in
	((((if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif) or (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) or (if SuperConstructorInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) or (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) or (if ConstructorInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1671:7-1671:45): 
ThisModule.allInstances()->exists(thisModule|Annotation.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then let genSelf1 = src in
	if genSelf1.refImmediateComposite().oclIsTypeOf(FieldDeclaration)
	then not (genSelf1.refImmediateComposite().isUndefined())
	else false
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1674:4-1674:42): 
ThisModule.allInstances()->exists(thisModule|Annotation.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then let genSelf1 = src in
	if genSelf1.refImmediateComposite().oclIsTypeOf(FieldDeclaration)
	then if genSelf1.refImmediateComposite().fragments(thisModule)->isEmpty()
	then false
	else not (genSelf1.refImmediateComposite().isUndefined())
	endif
	else false
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (1678:4-1678:42): 
ThisModule.allInstances()->exists(thisModule|Annotation.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then let genSelf1 = src in
	if genSelf1.refImmediateComposite().oclIsTypeOf(FieldDeclaration)
	then false
	else if genSelf1.refImmediateComposite().oclIsTypeOf(VariableDeclarationStatement)
	then not (genSelf1.refImmediateComposite().isUndefined())
	else false
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1692:3-1692:38): 
ThisModule.allInstances()->exists(thisModule|(ArrayCreation.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src1 = src.type in
	let _problem_2 = src1.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_2)
	then let src3 = _problem_2.oclAsType(AbstractMethodDeclaration) in
	src3.typeParameters.isEmpty()
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_2)
	then let src4 = _problem_2.oclAsType(AbstractMethodDeclaration) in
	not (src4.typeParameters.isEmpty())
	else false
	endif)
	endif)) or (ClassInstanceCreation.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src5 = src.type in
	let _problem_6 = src5.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_6)
	then let src7 = _problem_6.oclAsType(AbstractMethodDeclaration) in
	src7.typeParameters.isEmpty()
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_6)
	then let src8 = _problem_6.oclAsType(AbstractMethodDeclaration) in
	not (src8.typeParameters.isEmpty())
	else false
	endif)
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (170:4-174:10): 
ThisModule.allInstances()->exists(thisModule|(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((Initializer.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined()))) or (ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (InterfaceDeclaration.allInstances()->exists(src|let javaAttributes2 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (EnumDeclaration.allInstances()->exists(src|let javaAttributes3 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (AnnotationTypeDeclaration.allInstances()->exists(src|let javaAttributes4 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (AnnotationTypeMemberDeclaration.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (FieldDeclaration.allInstances()->exists(src|if src.fragments->isEmpty()
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (EnumConstantDeclaration.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (SingleVariableDeclaration.allInstances()->exists(src|if if src.methodDeclaration.isUndefined()
	then false
	else true
	endif
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (SingleVariableDeclaration.allInstances()->exists(src|if src.methodDeclaration.isUndefined()
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (VariableDeclarationFragment.allInstances()->exists(src|if not (src.variablesContainer.oclIsKindOf(FieldDeclaration))
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (VariableDeclarationFragment.allInstances()->exists(src|if src.variablesContainer.oclIsKindOf(FieldDeclaration)
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (AnonymousClassDeclaration.allInstances()->exists(src|let javaAttributes5 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let originalTypeAccess6 = src.refImmediateComposite().type in
	let tgt7 = oclUndefined(OclVoid) in
	not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (Block.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (AssertStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (BreakStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (CatchClause.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ConstructorInvocation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ContinueStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (DoStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (EmptyStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (EnhancedForStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ExpressionStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ForStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (IfStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (LabeledStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ReturnStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (SuperConstructorInvocation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (SwitchCase.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (SwitchStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (SynchronizedStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ThrowStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (TypeDeclarationStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (TryStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (VariableDeclarationStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (WhileStatement.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ArrayAccess.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ArrayCreation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ArrayInitializer.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (ArrayLengthAccess.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (Assignment.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (BooleanLiteral.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (CastExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (CharacterLiteral.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ClassInstanceCreation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ConditionalExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (FieldAccess.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (InfixExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (InstanceofExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (MethodInvocation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (NullLiteral.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (NumberLiteral.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ParenthesizedExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (PostfixExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (PrefixExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (StringLiteral.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))) or (SuperFieldAccess.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (SuperMethodInvocation.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (ThisExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (TypeLiteral.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())))) or (VariableDeclarationExpression.allInstances()->exists(src|not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined()))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1742:3-1742:14): 
Dead code

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1764:4-1764:58): 
ThisModule.allInstances()->exists(thisModule|ArrayAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.array) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1764:4-1764:58): 
ThisModule.allInstances()->exists(thisModule|ArrayAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.array) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1774:4-1774:58): 
ThisModule.allInstances()->exists(thisModule|ArrayAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.index) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1774:4-1774:58): 
ThisModule.allInstances()->exists(thisModule|ArrayAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.index) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1786:19-1786:90): 
ThisModule.allInstances()->exists(thisModule|ArrayCreation.allInstances()->exists(src|src.dimensions->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1786:4-1786:90): 
ThisModule.allInstances()->exists(thisModule|ArrayCreation.allInstances()->exists(src|src.dimensions->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1786:4-1786:90): 
ThisModule.allInstances()->exists(thisModule|ArrayCreation.allInstances()->exists(src|src.dimensions->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1787:4-1787:64): 
ThisModule.allInstances()->exists(thisModule|ArrayCreation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.initializer) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1787:4-1787:64): 
ThisModule.allInstances()->exists(thisModule|ArrayCreation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.initializer) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1801:19-1802:65): 
ThisModule.allInstances()->exists(thisModule|ArrayInitializer.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then src.expressions->select(e|not (e.oclIsTypeOf(Annotation)))->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1801:4-1802:65): 
ThisModule.allInstances()->exists(thisModule|ArrayInitializer.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then src.expressions->select(e|not (e.oclIsTypeOf(Annotation)))->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1801:4-1802:65): 
ThisModule.allInstances()->exists(thisModule|ArrayInitializer.allInstances()->exists(src|if not (src.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	then src.expressions->select(e|not (e.oclIsTypeOf(Annotation)))->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1816:4-1816:58): 
ThisModule.allInstances()->exists(thisModule|ArrayLengthAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.array) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1816:4-1816:58): 
ThisModule.allInstances()->exists(thisModule|ArrayLengthAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.array) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1836:4-1836:65): 
ThisModule.allInstances()->exists(thisModule|Assignment.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftHandSide) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1836:4-1836:65): 
ThisModule.allInstances()->exists(thisModule|Assignment.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftHandSide) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1845:4-1845:66): 
ThisModule.allInstances()->exists(thisModule|Assignment.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.rightHandSide) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1845:4-1845:66): 
ThisModule.allInstances()->exists(thisModule|Assignment.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.rightHandSide) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1876:4-1876:63): 
ThisModule.allInstances()->exists(thisModule|CastExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1876:4-1876:63): 
ThisModule.allInstances()->exists(thisModule|CastExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1885:3-1885:38): 
ThisModule.allInstances()->exists(thisModule|((((CastExpression.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src1 = src.type in
	let _problem_2 = src1.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_2)
	then let src3 = _problem_2.oclAsType(AbstractMethodDeclaration) in
	src3.typeParameters.isEmpty()
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_2)
	then let src4 = _problem_2.oclAsType(AbstractMethodDeclaration) in
	not (src4.typeParameters.isEmpty())
	else false
	endif)
	endif)) or (InstanceofExpression.allInstances()->exists(src|if src.rightOperand.isUndefined()
	then false
	else let src5 = src.rightOperand in
	let _problem_6 = src5.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_6)
	then let src7 = _problem_6.oclAsType(AbstractMethodDeclaration) in
	src7.typeParameters.isEmpty()
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_6)
	then let src8 = _problem_6.oclAsType(AbstractMethodDeclaration) in
	not (src8.typeParameters.isEmpty())
	else false
	endif)
	endif))) or (SuperFieldAccess.allInstances()->exists(src|if src.field.isUndefined()
	then false
	else let src9 = src.field in
	let _problem_10 = src9.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_10)
	then let src11 = _problem_10.oclAsType(AbstractMethodDeclaration) in
	src11.typeParameters.isEmpty()
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_10)
	then let src12 = _problem_10.oclAsType(AbstractMethodDeclaration) in
	not (src12.typeParameters.isEmpty())
	else false
	endif)
	endif))) or (ThisExpression.allInstances()->exists(src|if src.qualifier.isUndefined()
	then false
	else let src13 = src.qualifier in
	let _problem_14 = src13.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_14)
	then let src15 = _problem_14.oclAsType(AbstractMethodDeclaration) in
	src15.typeParameters.isEmpty()
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_14)
	then let src16 = _problem_14.oclAsType(AbstractMethodDeclaration) in
	not (src16.typeParameters.isEmpty())
	else false
	endif)
	endif))) or (VariableDeclarationExpression.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src17 = src.type in
	let _problem_18 = src17.refImmediateComposite() in
	(if AbstractMethodDeclaration.allInstances()->includes(_problem_18)
	then let src19 = _problem_18.oclAsType(AbstractMethodDeclaration) in
	src19.typeParameters.isEmpty()
	else false
	endif) or (if AbstractMethodDeclaration.allInstances()->includes(_problem_18)
	then let src20 = _problem_18.oclAsType(AbstractMethodDeclaration) in
	not (src20.typeParameters.isEmpty())
	else false
	endif)
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1886:4-1886:18): 
ThisModule.allInstances()->exists(thisModule|((((CastExpression.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src1 = src.type in
	let _problem_2 = src1.type in
	(not (_problem_2.isUndefined())) and (((((((((((((((((((not (if InterfaceDeclaration.allInstances()->includes(_problem_2)
	then let src3 = _problem_2.oclAsType(InterfaceDeclaration) in
	not (src3.typeParameters.isEmpty())
	else false
	endif)) and (not (if EnumDeclaration.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_2)
	then let src4 = _problem_2.oclAsType(ClassDeclaration) in
	not (src4.typeParameters.isEmpty())
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_2)
	then let src5 = _problem_2.oclAsType(ClassDeclaration) in
	src5.typeParameters.isEmpty()
	else false
	endif))) and (not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_2)
	then let src6 = _problem_2.oclAsType(InterfaceDeclaration) in
	src6.typeParameters.isEmpty()
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_2)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_2)
	then true
	else false
	endif)))
	endif)) or (InstanceofExpression.allInstances()->exists(src|if src.rightOperand.isUndefined()
	then false
	else let src7 = src.rightOperand in
	let _problem_8 = src7.type in
	(not (_problem_8.isUndefined())) and (((((((((((((((((((not (if InterfaceDeclaration.allInstances()->includes(_problem_8)
	then let src9 = _problem_8.oclAsType(InterfaceDeclaration) in
	not (src9.typeParameters.isEmpty())
	else false
	endif)) and (not (if EnumDeclaration.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_8)
	then let src10 = _problem_8.oclAsType(ClassDeclaration) in
	not (src10.typeParameters.isEmpty())
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_8)
	then let src11 = _problem_8.oclAsType(ClassDeclaration) in
	src11.typeParameters.isEmpty()
	else false
	endif))) and (not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_8)
	then let src12 = _problem_8.oclAsType(InterfaceDeclaration) in
	src12.typeParameters.isEmpty()
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_8)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_8)
	then true
	else false
	endif)))
	endif))) or (SuperFieldAccess.allInstances()->exists(src|if src.field.isUndefined()
	then false
	else let src13 = src.field in
	let _problem_14 = src13.type in
	(not (_problem_14.isUndefined())) and (((((((((((((((((((not (if InterfaceDeclaration.allInstances()->includes(_problem_14)
	then let src15 = _problem_14.oclAsType(InterfaceDeclaration) in
	not (src15.typeParameters.isEmpty())
	else false
	endif)) and (not (if EnumDeclaration.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_14)
	then let src16 = _problem_14.oclAsType(ClassDeclaration) in
	not (src16.typeParameters.isEmpty())
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_14)
	then let src17 = _problem_14.oclAsType(ClassDeclaration) in
	src17.typeParameters.isEmpty()
	else false
	endif))) and (not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_14)
	then let src18 = _problem_14.oclAsType(InterfaceDeclaration) in
	src18.typeParameters.isEmpty()
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_14)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_14)
	then true
	else false
	endif)))
	endif))) or (ThisExpression.allInstances()->exists(src|if src.qualifier.isUndefined()
	then false
	else let src19 = src.qualifier in
	let _problem_20 = src19.type in
	(not (_problem_20.isUndefined())) and (((((((((((((((((((not (if InterfaceDeclaration.allInstances()->includes(_problem_20)
	then let src21 = _problem_20.oclAsType(InterfaceDeclaration) in
	not (src21.typeParameters.isEmpty())
	else false
	endif)) and (not (if EnumDeclaration.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_20)
	then let src22 = _problem_20.oclAsType(ClassDeclaration) in
	not (src22.typeParameters.isEmpty())
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_20)
	then let src23 = _problem_20.oclAsType(ClassDeclaration) in
	src23.typeParameters.isEmpty()
	else false
	endif))) and (not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_20)
	then let src24 = _problem_20.oclAsType(InterfaceDeclaration) in
	src24.typeParameters.isEmpty()
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_20)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_20)
	then true
	else false
	endif)))
	endif))) or (VariableDeclarationExpression.allInstances()->exists(src|if src.type.isUndefined()
	then false
	else let src25 = src.type in
	let _problem_26 = src25.type in
	(not (_problem_26.isUndefined())) and (((((((((((((((((((not (if InterfaceDeclaration.allInstances()->includes(_problem_26)
	then let src27 = _problem_26.oclAsType(InterfaceDeclaration) in
	not (src27.typeParameters.isEmpty())
	else false
	endif)) and (not (if EnumDeclaration.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_26)
	then let src28 = _problem_26.oclAsType(ClassDeclaration) in
	not (src28.typeParameters.isEmpty())
	else false
	endif))) and (not (if ClassDeclaration.allInstances()->includes(_problem_26)
	then let src29 = _problem_26.oclAsType(ClassDeclaration) in
	src29.typeParameters.isEmpty()
	else false
	endif))) and (not (if AnnotationTypeDeclaration.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if InterfaceDeclaration.allInstances()->includes(_problem_26)
	then let src30 = _problem_26.oclAsType(InterfaceDeclaration) in
	src30.typeParameters.isEmpty()
	else false
	endif))) and (not (if ArrayType.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if ParameterizedType.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeLong.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeShort.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeChar.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeByte.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeDouble.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeBoolean.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeVoid.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeInt.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if PrimitiveTypeFloat.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if TypeParameter.allInstances()->includes(_problem_26)
	then true
	else false
	endif))) and (not (if WildCardType.allInstances()->includes(_problem_26)
	then true
	else false
	endif)))
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1907:4-1907:63): 
ThisModule.allInstances()->exists(thisModule|ClassInstanceCreation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1907:4-1907:63): 
ThisModule.allInstances()->exists(thisModule|ClassInstanceCreation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1908:19-1908:89): 
ThisModule.allInstances()->exists(thisModule|ClassInstanceCreation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1908:4-1908:89): 
ThisModule.allInstances()->exists(thisModule|ClassInstanceCreation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1908:4-1908:89): 
ThisModule.allInstances()->exists(thisModule|ClassInstanceCreation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1924:4-1924:63): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1924:4-1924:63): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1925:4-1925:67): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.thenExpression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1925:4-1925:67): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.thenExpression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1926:4-1926:67): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.elseExpression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1926:4-1926:67): 
ThisModule.allInstances()->exists(thisModule|ConditionalExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.elseExpression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1937:4-1937:63): 
ThisModule.allInstances()->exists(thisModule|FieldAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1937:4-1937:63): 
ThisModule.allInstances()->exists(thisModule|FieldAccess.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1957:4-1957:64): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftOperand) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1957:4-1957:64): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftOperand) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1958:4-1958:65): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.rightOperand) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1958:4-1958:65): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.rightOperand) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1959:19-1959:96): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|src.extendedOperands->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1959:4-1959:96): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|src.extendedOperands->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1959:4-1959:96): 
ThisModule.allInstances()->exists(thisModule|InfixExpression.allInstances()->exists(src|src.extendedOperands->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1970:4-1970:64): 
ThisModule.allInstances()->exists(thisModule|InstanceofExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftOperand) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1970:4-1970:64): 
ThisModule.allInstances()->exists(thisModule|InstanceofExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.leftOperand) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1982:4-1982:63): 
ThisModule.allInstances()->exists(thisModule|MethodInvocation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1982:4-1982:63): 
ThisModule.allInstances()->exists(thisModule|MethodInvocation.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (1983:19-1983:89): 
ThisModule.allInstances()->exists(thisModule|MethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (1983:4-1983:89): 
ThisModule.allInstances()->exists(thisModule|MethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (1983:4-1983:89): 
ThisModule.allInstances()->exists(thisModule|MethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (2024:4-2024:63): 
ThisModule.allInstances()->exists(thisModule|ParenthesizedExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (2024:4-2024:63): 
ThisModule.allInstances()->exists(thisModule|ParenthesizedExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.expression) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (2035:4-2035:60): 
ThisModule.allInstances()->exists(thisModule|PostfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.operand) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (2035:4-2035:60): 
ThisModule.allInstances()->exists(thisModule|PostfixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.operand) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (2046:4-2046:60): 
ThisModule.allInstances()->exists(thisModule|PrefixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.operand) in
	(not (_problem_1.isUndefined())) and ((((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_1)
	then let src3 = _problem_1.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_1)
	then let src4 = _problem_1.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_1)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_1)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (2046:4-2046:60): 
ThisModule.allInstances()->exists(thisModule|PrefixExpression.allInstances()->exists(src|let _problem_1 = thisModule->filterExpression(src.operand) in
	if Annotation.allInstances()->includes(_problem_1)
	then let src2 = _problem_1.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (2089:19-2089:89): 
ThisModule.allInstances()->exists(thisModule|SuperMethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (2089:4-2089:89): 
ThisModule.allInstances()->exists(thisModule|SuperMethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (2089:4-2089:89): 
ThisModule.allInstances()->exists(thisModule|SuperMethodInvocation.allInstances()->exists(src|src.arguments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.FlattenOverNonNestedCollectionImpl (2136:19-2136:89): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationExpression.allInstances()->exists(src|src.fragments->collect(e|thisModule->filterExpression(e))->flatten()->notEmpty()))

anatlyzer.atl.errors.atl_error.impl.BindingPossiblyUnresolvedImpl (2136:4-2136:89): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationExpression.allInstances()->exists(src|src.fragments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|(((((((((((((((((((((((((not (if SuperFieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif)) and (not (if ThisExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if SuperMethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ArrayInitializer.allInstances()->includes(_problem_)
	then let src3 = _problem_.oclAsType(ArrayInitializer) in
	not (src3.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif))) and (not (if ArrayLengthAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if Assignment.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if BooleanLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CastExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if CharacterLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ClassInstanceCreation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ConditionalExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if FieldAccess.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if InstanceofExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if MethodInvocation.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NumberLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if NullLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if ParenthesizedExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PostfixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if PrefixExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if StringLiteral.allInstances()->includes(_problem_)
	then let src4 = _problem_.oclAsType(StringLiteral) in
	not (src4.refImmediateComposite().oclIsKindOf(EnumConstantDeclaration))
	else false
	endif))) and (not (if TypeLiteral.allInstances()->includes(_problem_)
	then true
	else false
	endif))) and (not (if VariableDeclarationExpression.allInstances()->includes(_problem_)
	then true
	else false
	endif)))))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (2136:4-2136:89): 
ThisModule.allInstances()->exists(thisModule|VariableDeclarationExpression.allInstances()->exists(src|src.fragments->collect(e|thisModule->filterExpression(e))->flatten()->select(i1|not (i1.isUndefined()))->exists(_problem_|if Annotation.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(Annotation) in
	not (src2.refImmediateComposite().oclIsTypeOf(AnnotationMemberValuePair))
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (268:4-268:33): 
ThisModule.allInstances()->exists(thisModule|ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then let _problem_2 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (295:4-295:33): 
ThisModule.allInstances()->exists(thisModule|AnonymousClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let originalTypeAccess2 = src.refImmediateComposite().type in
	let tgt3 = oclUndefined(OclVoid) in
	let _problem_4 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_4)
	then true
	else false
	endif) or (if LabeledStatement.allInstances()->includes(_problem_4)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_4)
	then true
	else false
	endif)) or (if Archive.allInstances()->includes(_problem_4)
	then true
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (341:3-341:32): 
ThisModule.allInstances()->exists(thisModule|InterfaceDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then let _problem_2 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (365:4-365:33): 
ThisModule.allInstances()->exists(thisModule|EnumDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let _problem_2 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (420:4-420:33): 
ThisModule.allInstances()->exists(thisModule|AnnotationTypeDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let _problem_2 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (499:4-503:10): 
ThisModule.allInstances()->exists(thisModule|(ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let type2 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then let type3 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif
	else false
	endif)) or (InterfaceDeclaration.allInstances()->exists(src|let javaAttributes4 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if not (src.typeParameters.isEmpty())
	then let type5 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (524:4-524:33): 
ThisModule.allInstances()->exists(thisModule|ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let type2 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then let _problem_3 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_3)
	then true
	else false
	endif) or (if LabeledStatement.allInstances()->includes(_problem_3)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_3)
	then true
	else false
	endif)) or (if Archive.allInstances()->includes(_problem_3)
	then true
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (552:3-552:32): 
ThisModule.allInstances()->exists(thisModule|InterfaceDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if not (src.typeParameters.isEmpty())
	then let _problem_2 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (582:4-590:10): 
ThisModule.allInstances()->exists(thisModule|ParameterizedType.allInstances()->exists(src|not (if src.type.type->oclIsKindOf(UnresolvedTypeDeclaration)
	then oclUndefined(OclVoid)
	else if src.type.type.typeParameters(thisModule).isEmpty()
	then oclUndefined(OclVoid)
	else src.type->getType()
	endif
	endif.isUndefined())))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (585:10-585:38): 
ThisModule.allInstances()->exists(thisModule|ParameterizedType.allInstances()->exists(src|if src.type.type->oclIsKindOf(UnresolvedTypeDeclaration)
	then false
	else if not (src.type.type.isUndefined())
	then not (ClassDeclaration.allInstances()->includes(src.type.type))
	else false
	endif
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (617:4-617:47): 
ThisModule.allInstances()->exists(thisModule|((((ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let javaExtends2 = e in
	let _problem_3 = javaExtends2.refImmediateComposite() in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_3)
	then let src4 = _problem_3.oclAsType(AbstractMethodDeclaration) in
	src4.typeParameters.isEmpty()
	else false
	endif
	endif)
	else false
	endif)) or (InterfaceDeclaration.allInstances()->exists(src|let javaAttributes5 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let javaExtends6 = e in
	let _problem_7 = javaExtends6.refImmediateComposite() in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_7)
	then let src8 = _problem_7.oclAsType(AbstractMethodDeclaration) in
	src8.typeParameters.isEmpty()
	else false
	endif
	endif)
	else false
	endif))) or (EnumDeclaration.allInstances()->exists(src|let javaAttributes9 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let javaExtends10 = e in
	let _problem_11 = javaExtends10.refImmediateComposite() in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_11)
	then let src12 = _problem_11.oclAsType(AbstractMethodDeclaration) in
	src12.typeParameters.isEmpty()
	else false
	endif
	endif)))) or (AnnotationTypeDeclaration.allInstances()->exists(src|let javaAttributes13 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let javaExtends14 = e in
	let _problem_15 = javaExtends14.refImmediateComposite() in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_15)
	then let src16 = _problem_15.oclAsType(AbstractMethodDeclaration) in
	src16.typeParameters.isEmpty()
	else false
	endif
	endif)))) or (ClassDeclaration.allInstances()->exists(src|let javaAttributes17 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then if src.superClass.isUndefined()
	then false
	else let javaExtends18 = src.superClass in
	let _problem_19 = javaExtends18.refImmediateComposite() in
	if AbstractMethodDeclaration.allInstances()->includes(_problem_19)
	then let src20 = _problem_19.oclAsType(AbstractMethodDeclaration) in
	src20.typeParameters.isEmpty()
	else false
	endif
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (625:3-625:21): 
ThisModule.allInstances()->exists(thisModule|((ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let type2 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then let type3 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let targetFrom4 = type3 in
	let sourceTo5 = e in
	not (targetFrom4.isUndefined())
	endif)
	else false
	endif
	else false
	endif)) or (InterfaceDeclaration.allInstances()->exists(src|let javaAttributes6 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if not (src.typeParameters.isEmpty())
	then let type7 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then src.superInterfaces->exists(e|if src.oclIsTypeOf(ClassDeclaration)
	then false
	else let targetFrom8 = type7 in
	let sourceTo9 = e in
	not (targetFrom8.isUndefined())
	endif)
	else false
	endif
	else false
	endif))) or (ClassDeclaration.allInstances()->exists(src|let javaAttributes10 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	let type11 = oclUndefined(OclVoid) in
	if not (src.typeParameters.isEmpty())
	then if src.superClass.isUndefined()
	then false
	else let targetFrom12 = type11 in
	let sourceTo13 = src.superClass in
	not (targetFrom12.isUndefined())
	endif
	else false
	endif)))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (903:14-903:28): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (906:46-906:60): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.returnType(thisModule).isUndefined()
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (910:4-910:35): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then src.parameters->select(i1|not (i1.isUndefined()))->exists(_problem_|if SingleVariableDeclaration.allInstances()->includes(_problem_)
	then let src2 = _problem_.oclAsType(SingleVariableDeclaration) in
	src2.methodDeclaration.isUndefined()
	else false
	endif)
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (919:12-919:42): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (922:48-922:78): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if src.typeParameters.isEmpty()
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (965:13-965:43): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (968:49-968:79): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else if src.redefinedMethodDeclaration(thisModule).isUndefined()
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	endif
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.BindingWithoutRuleImpl (986:5-990:10): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then not (if src.originalCompilationUnit.isUndefined()
	then src.originalClassFile
	else src.originalCompilationUnit
	endif.isUndefined())
	else false
	endif))

anatlyzer.atl.errors.atl_error.impl.FeatureNotFoundImpl (998:13-998:27): 
ThisModule.allInstances()->exists(thisModule|AbstractMethodDeclaration.allInstances()->exists(src|if not (src.typeParameters.isEmpty())
	then if src.oclIsKindOf(ConstructorDeclaration)
	then false
	else not (MethodDeclaration.allInstances()->includes(src))
	endif
	else false
	endif))

#########################################

third-party/largeprojects/modisco/java2kdm/javaToKdm.atl
anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (268:4-268:33): 
ThisModule.allInstances()->exists(thisModule|ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then let _problem_2 = javaAttributes1 in
	(((if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif)
	else false
	endif))

#########################################

third-party/largeprojects/modisco/java2kdm/javaToKdm.atl
anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (268:4-268:33): 
ThisModule.allInstances()->exists(thisModule|ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then let _problem_2 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)
	else false
	endif))

#########################################

third-party/largeprojects/modisco/java2kdm/javaToKdm.atl
anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (268:4-268:33): 
ThisModule.allInstances()->exists(thisModule|ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then let _problem_2 = javaAttributes1 in
	(((if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif)
	else false
	endif))

#########################################

third-party/largeprojects/modisco/java2kdm/javaToKdm.atl
anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (268:4-268:33): 
ThisModule.allInstances()->exists(thisModule|ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then let _problem_2 = javaAttributes1 in
	(((if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif)
	else false
	endif))

#########################################

third-party/largeprojects/modisco/java2kdm/javaToKdm.atl
anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (268:4-268:33): 
ThisModule.allInstances()->exists(thisModule|ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then let _problem_2 = javaAttributes1 in
	(((if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif)
	else false
	endif))

#########################################

third-party/largeprojects/modisco/java2kdm/javaToKdm.atl
anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (268:4-268:33): 
ThisModule.allInstances()->exists(thisModule|ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then let _problem_2 = javaAttributes1 in
	(((if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)
	else false
	endif))

#########################################

third-party/largeprojects/modisco/java2kdm/javaToKdm.atl
anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (268:4-268:33): 
ThisModule.allInstances()->exists(thisModule|ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then let _problem_2 = javaAttributes1 in
	(((if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif)
	else false
	endif))

#########################################

third-party/largeprojects/modisco/java2kdm/javaToKdm.atl
anatlyzer.atl.errors.atl_error.impl.BindingWithResolvedByIncompatibleRuleImpl (268:4-268:33): 
ThisModule.allInstances()->exists(thisModule|ClassDeclaration.allInstances()->exists(src|let javaAttributes1 = src.bodyDeclarations->select(e|e.oclIsTypeOf(FieldDeclaration))->collect(f|if f.fragments->isEmpty()
	then f
	else f.fragments
	endif) in
	if src.typeParameters.isEmpty()
	then let _problem_2 = javaAttributes1 in
	(((if Archive.allInstances()->includes(_problem_2)
	then true
	else false
	endif) or (if CompilationUnit.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if LabeledStatement.allInstances()->includes(_problem_2)
	then true
	else false
	endif)) or (if AnnotationMemberValuePair.allInstances()->includes(_problem_2)
	then true
	else false
	endif)
	else false
	endif))

#########################################

